<?xml version="1.0"?>
<!-- ----------------------------------------------------------------------------
Copyright 2013-2014 Bo Zimmerman

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--------------------------------------------------------------------------------

Instructions:
The following is some guidelines on how to write an XML document for the random
area generator, accessed via the GENERATE command.  Since the purpose of this
XML document is to help select from random choices, you'll find a lot of its
quirks are centered towards helping you do this.  The format is standard XML, 
whose meaning is parsed quite creatively.  Read close.

The Root tag must be "AREADATA", and this tag must contain all others.
Basic tags are AREA, ROOM, MOB, ITEM, and STRING.
Any tag that contains other tags of the same type is a Container tag.
Tags are always evaluated recursively, from first to last.
Any tag may contain zero or more of the following meta-attributes:
"id"      exposes the tag to either the Generate command, or to the "insert" 
          or "like" attributes.
"load"    the xml inside the file named is inserted into the tag
"like"    a comma separated list of other tag "id"s of the SAME TYPE. These may
          NOT be container tags.  This will allow the current tag to be parsed 
          as if it contained the same tags and attributes as the listed tags. 
          This is useful for making one-off variations on existing tag structures.
"insert"  a comma separated list of other tag ids. The targeted tags may be of
          any type, and may be containers.  It will cause the tags to be parsed
          and the resulting tags added as contents of the host tag as if they were
          already inside it.  Remember, the listed tags will be parsed first, so
          any "condition", "select" or other operations will occur.
"copyof"  a tag "id" or standard class id. This will cause the stats and attributes 
          and other details of the listed items into the current object.
"validate" a boolean expression which must evaluate to true for the tag to be finally
          built into an object.  Check "condition" below for more information....
"condition" the value is a boolean expression which must evaluate to true for the
          tag to be included in its parent.  This is similar to "validate" except
          that "condition" determines whether a tag is among the allowed choices, 
          whereas "validate" determines whether, after being chosen, it is finally
          built into a final thing (whether string, mob, item, whatever).
          These expressions may use boolean operators like AND and OR and NOT (or !), 
          string constants are always single-quoted 'string', string comparison 
          operators include = , !=, and IN to check to see if the lhs string is a 
          substring of the rhs string. Numeric comparisons may be made as well, and 
          numeric comparison operators include > < >= <= != =.  Parenthesis may be 
          used to group sub-expressions. Defined variables may be included, but only 
          if preceded by a $ character. For instance, to check if the variable "bob" 
          is equal to "bobvalue", you would enter $bob='bobvalue'.  Undefined string 
          ids are treated as ''.  Remember that in XML, a < and > characters can not 
          appear in attribute values, which is why they must be written as &lt; and 
          &gt; in your xml.
"define"  this attribute is only used if its "condition" is met, and it is "selected"
          by its parent tag, if applicable.  It is a comma separated list of any 
          combination of the following:
          "id": either a new or existing identifier, in which case the value that
          this tag resolves to will be set to that identifier, allowing it to be
          used in "condition", tag values, or other places.
          "id=value": will set the new or existing identifier "id" to the given
          constant "value".
          "id+=number":
          "id*=number":
          "id-=number":
          "id/=number": Will attempt to evaluate the existing value of the identifier
          "id" as a number, and perform the given operation upon it with the "number"
          given. For instance "bob+=3" will add the number 3 to the current value of
          the identifier "bob".  Any undefined "id" will be treated as if it were 0.
          When dealing with areas, there is an extra feature of defined
          identifiers.  An identifier whose name starts with "_" will persist for 
          every tag and object in the room's "room group".  An identifier whose name 
          starts with "__" will persist throughout the entire area.  Otherwise, any
          variables defined using this command will persist only for one room. 
"predefine" identical to "define", but always evaluated when encountered.
"select"  Used mostly by container tags, this attribute allows you to specify how 
          multiple choices are resolved by this tag.  More than one selection may be
          made, which makes sense when selecting MOB tags for a ROOM.  However, 
          sometimes it does not, such as when selecting a NAME for a MOB.  In those
          cases, any remaining multiple-choices are always selected randomly from.  
          Possible values are:
          "all": always selects every choice.
          "none": always selects none of the choices (why would anyone use this?!)
          "first": selects the first choice (another stupid one)
          "last": you guessed it, select the last choice
          "repeat-X": always selects every choice, and treats the choices as if 
          enough of them actually existed to select X** of them, even if not enough
          choices were given.
          "first-X": selects the first X** choices.
          "last-X": selects the last X** choices.
          "limit-x": selects up to X** random choices, but less is OK too if no more.
          "any-X": selects any X** of the choices, without repeating.  Make sure you
          have another choices to cover the possible value of X!
          "pick-X": same as "any-X", but the tag choices will be checked for the 
          "pickweight" attribute, which will be used as a relative weight when 
          selecting among the choices.
          ** Where you see X above, this may be a number, or a math formula or
          math expression. (see mud help on math formulas/math expressions)
"merge"   this parameter is required if two tags with the same ID are included in
          the same xml document.  It permits some of the tag parameters, and all of
          the content tags, to be merged together into a single referenced tag.
"pickweight" A helper attribute for the "select" attribute, when a "pick" value is
          used by the select attribute.  See "select" attribute above.
"action"  used by string-type choices to inform the engine on how to combine the 
          multiple choices into a single string.  Possible values include:
          "append": append the tags value to the string as built so far.
          "replace": completely replace any string build so far with this ones value.
          "prepend": always put this strings value at the beginning of the final string.
"requires" a comma-separated list of variable identifiers which must have already been
          defined before this tag can be evaluated.  Such variables are usually defined
          by the user of the GENERATE command, but can also be defined at parse-time by
          the "define" attribute, if you are creative.  Each item in the list is of the
          format "id=type", so that the parser can check to see not only if the variable
          is defined, but that it is defined properly.  Possible types include "#" for
          a number, "int" for an integer, "$" for a string, or a semicolon-delimited 
          list of possible string values.

Tag values:
A non-container non-basic tag will typically have a string value.  This value may contain
any embedded variables or identifiers, so long as they are preceded with a $ character.

A string beginning with a $ character will be assumed to be an identifier, and will be
searched for within the list of defined variables and identifiers.  If the identifier
resolves to a tag, the tag will be parsed as a string.  If the identifier resolves to
a string, so much the easier.  

Tag names can also be embedded in {} characters; for example: ${tagname}. When embedded 
in this way, the tagname may be preceeded by "u:" to force to all-uppercase, "l:" to 
force all-lowercase, "p:" to force plural, or "c:" to force to be capitalized (first letter upper, rest lower).

Special Tag values:
$SYSTEM_RANDOM_NAME:[NUMX]-[NUMY] generate a random name with between NUMX and NUMY syllables.
${STAT:[STATNAME]} embed the value from another stat on the same object.  STATs are things like
  NAME, DISPLAY, DESCRIPTION, etc...
${STAT:[PATH]:[TO]:[ANOTHER]:[OBJECT]:[STATNAME]} embed the value from another objects stat, potentially
  in a different room. Where path-to-another-object may be: ROOM to refer to the room containing
  the object, NORTH,SOUTH,EAST,WEST,UP,DOWN,NORTHEAST..etc.. to specify a room in a specific 
  direction, ANYROOM to specify any room connected to this one, MOB to specify any mob in the
  room, ITEM to specify any item in the room, AREA to specify the area object, or AREAGATE 
  to specify a connecting room outside the area.  For example a string such as:
  "To the east is the residence of ${STAT:ROOM:EAST:MOB:NAME}" 
    would embed the name of a mob in a room to the east of the current room.
  This command may internally cause post-processing if necessary, and so is almost guarenteed.
(a(n)) will remove any indefinite or definite articles from the string immediately following it
  and replace it (or insert) either "a" or "an" depending on the first letter of the word.

Objects:
Each basic tag type may contain other basic tag types to help define them.  For instance,
room tags may contain mob and item tags.

Details:
Each basic tag type is used to build an object of that type.  For instance, the MOB tag
is used to build a MOB.  Therefore, each basic object type must have other tags or attributes
to "fill in the details", such as name, level, and so forth.  These Details may be 
defined as variables on the command line using GENERATE or by the "define" attribute, or
may be given as an attribute of the basic tag, or as other tags inside the parent tag.  
A Detail given as an attribute always supersedes any detail given as internal tags, no 
matter what.  A detail found as an defined variable identifier, supersedes both tags and
attributes.

Basic tags may also have special pre-defined variables to help give some context to help
with their parsing, and will often cause variables to be defined as their details are 
filled in.  Basic tags also have certain required details which must be resolved for the
object to be created, and other optional details which may or may not be given, and which
are extremely object-specific.

----------------------------------------

AREA Basic tags: 
As the highest-level possible tag, an area is parsed only with the variables
it is given on the GENERATE command line, and using whatever it can find in its XML
contents for its details.  All details mentioned below will automatically cause a
variable to be defined or re-defined when they are parsed.  The variable will be 
called "AREA_DETAILNAME".  For instance "AREA_CLASS" for class, and "AREA_NAME" for name.

The layout of an area will cause its rooms to be logically grouped up into streets,
"leaf" rooms (rooms with only one exist), and other logical groupings.  "leaf" rooms
are always done first, followed by streets, and others.  The layout will automatically
define certain variables for each room to help with parsing the rooms details.  These
variables include:
AREA_NUMLEAFS: the number of leaf rooms for the whole area
ROOMTAG_NODETYPE: one of surround, leaf, offleaf, street, square, interior
ROOMTAG_NODERUN: for streets, which way they run.  Values are ns, ew, nwse, nesw
ROOMTAG_NODEFLAGS: various rooms flags. Values include: corner, gate, intersection, tee, offleaf 
ROOMTAG_NODEEXITS: comma separated list of all exits from a room
ROOMTAG_NODEGATEEXIT: if this room is a "gate" rooms, which direction is the gate in.
ROOMLINK_N, ROOMLINK_S, ROOMLINK_E, ROOMLINK_W, etc: "true" if an exit exists that way.
ROOMTITLE_N, ROOMTITLE_S, ROOMTITLE_E, ROOMTITLE_W, etc: if already done, the title of a room that way.
NODETYPE_N, NODETYPE_S, NODETYPE_E, NODETYPE_W, etc: type of room node in that direction, if any.

Required details:
"class"        The CoffeeMud class type to use to create the area.
"name"         The name of the area.  Must be unique to your MUD.
"layout"       The name of the layout generator to use.  At the moment, supported 
               layouts include MAZE, BOXCITY, BOXCITYSQUARE, CROSS, GRIDCITY, TREE,
               APARTMENT
"size"         The number of rooms to create in the area.

Optional objects: (See below for details on these object tag types and their details)
"AFFECT", "BEHAVIOR", "ROOM"

Optional details: (See Archon's Guide)
"CLIMATE", "DESCRIPTION", "THEME", "BLURBS", "PREJUDICE", "BUDGET", "DEVALRATE",
"INVRESETRATE", "IGNOREMASK", "PRICEMASKS"  

----------------------------------------

ROOM Basic tags:
Parsed with variables from the generate command, and from any defined variables internal, and
from any internal tags and attributes, and from any variables defined by its AREA tag. As
with areas, its details will cause variables beginning with ROOM_ to be defined.

Required details: 
"class", "title", "description"

Optional Objects: (See below for details on these object tag types and their details) 
"MOB","ITEM","AFFECT", "BEHAVIOR", "EXIT"

You can also specify a "LAYOUT" attribute on a room tag, in which case all rooms contained inside
that room tag (or inserted, or whatever) are used to build multiple rooms from that layout,
much as specified above on the AREA tag. 

----------------------------------------

MOB Basic tags:
Parsed with variables from the generate command, and from any defined variables internal, and
from any internal tags and attributes, and from any variables defined by other room tags. As
with areas, its details will cause variables beginning with MOB_ to be defined.
Required details: 
"class": normally the CoffeeMud class the mob will be made from, though it may also be the
word catalog in order to select a mob from your catalog, in which case "name" also becomes
a required detail.

Optional Objects: (See below for details on these object tag types and their details) 
"MOB","ITEM","AFFECT", "ABILITY", "BEHAVIOR", "EXIT", "FACTION"

Optional details: (See Archon's Guide)
"RACE","LEVEL","NAME","DISPLAY","DESCRIPTION","MONEY","ALIGNMENT", "DISPOSITION","SENSES",
"ARMOR","DAMAGE","ATTACK","SPEED","TATTS","EXPS","IMG","FACTIONS","VARMONEY"
(plus or minus others depending upon class)
The "RACE" detail can be the name of a race, or resolve to a RACE tag, see below.

----------------------------------------

Item Basic tags:
Parsed with variables from the generate command, and from any defined variables internal, and
from any internal tags and attributes, and from any variables defined by other room tags. As
with areas, its details will cause variables beginning with ITEM_ to be defined.
Required details: 
"class": normally the CoffeeMud class the item will be made from, though it may also be the
word catalog in order to select an item from your catalog, in which case "name" also becomes
a required detail.  This may also start with the string "metacraft:", in which case the 
remainder of the "class" value becomes either the name of the item to metacraft, the word "anything", 
"all", or the words "any-" or "all-" followed by the ID of the common skill to use. 
"metacraft:" class strings may also end with the characters "<" followed by a math expression 
evaluating to an upper level limit for the item to craft, ">" for a lower limit, or "=" followed
by a the base class ID to to filter in.

Optional Objects: (See below for details on these object tag types and their details) 
"MOB","ITEM","AFFECT", "CONTENT", "BEHAVIOR", "EXIT"

Optional details: (See Archon's Guide)
"USES","LEVEL","ABILITY","NAME", "DISPLAY","DESCRIPTION","SECRET","PROPERWORN", "WORNAND",
"BASEGOLD","ISREADABLE","ISDROPPABLE", "ISREMOVABLE","MATERIAL","AFFBEHAV", "DISPOSITION",
"WEIGHT","ARMOR", "DAMAGE","ATTACK","READABLETEXT","IMG"
(plus or minus many many others depending upon class)

"ShopKeeper" type classes may use "SHOPINVENTORY" tags to hold ITEM, MOB, or ABILITY tags
to designate what else is sold.  Also, the SHOPINVENTORY or those ITEM, MOB, or ABILITY tags 
may contain optional PRICE or NUMBER attributes.

----------------------------------------

Affect, Ability, Behavior tags:
Required detail: "class"
Optional Detail: "parms"

----------------------------------------

Content tags:
A pure container tag that contains one or more ITEM tags, as above.

----------------------------------------

Exit tags:
Required detail: "class"
Optional Objects: "AFFECT","BEHAVIOR", "CLASS","NAME","DISPLAY","DESCRIPTION","DOOR",
"LEVEL","ABILITY","ISREADABLE","AFFBEHAV","DISPOSITION", "READABLETEXT","HASADOOR",
"DEFCLOSED","HASALOCK","DEFLOCKED",	"KEYNAME"

----------------------------------------

Race tags:
Required detail: "class", "name"
Warning: Generating a custom race will add the race to your database!
Optional Objects: "CAT","VWEIGHT","BWEIGHT","VHEIGHT","FHEIGHT","MHEIGHT","AVAIL","LEAVE",
"NUMRABLE","GETRABLE<number>","GETRABLEPROF<number>","GETRABLEQUAL<number>","GETRABLELVL<number>",
"NUMCABLE<number>","GETCABLE<number>","GETCABLEPROF<number>","BODYKILL","AGING", "HELP"
"NUMREFF","GETREFF<number>","GETREFFPARM<number>","GETREFFLVL<number>","BREATHES","ARRIVE",
"HEALTHRACE","BODY","WEAPONRACE","DISFLAGS","EVENTRACE",

Special Optional Objects:
"WEAR" - either a bitmask number, or wear locations names set equal to true to forbid, 
	or false to allow, e.g (mouth=true back=false left_wrist=false)
"ESTATS","ASTATS","CSTATS","ASTATE","STARTASTATE" - either a | delimited stat list, 
	or a series of var=value, e.g. (STRENGTH=5 HITS=2 ATTACK=2 etc..)
"NUMRSC","NUMOFT" - the name of an item tag or tags to designate the race resources and outfit respectively.
"WEAPONCLASS" - the name of an item tag or tags from which the race natural weapon is chosen

----------------------------------------

Faction tags:
Required details: "id" "value"

-->
<AREADATA>

<STRING load="/resources/randareas/inc_roomruns.xml" />
<STRING load="/resources/randareas/inc_common.xml" />
<STRING load="/resources/randareas/inc_adjectives.xml" />

<AREA id="maze_dungeon" merge=true layout="MAZE" requires="areaname=$,areasize=int,level_range=int,aggrochance=int,theme=random" >
	<NAME>$areaname</NAME><SIZE>$areasize</SIZE>
	<CLASS select="any-1"><CLASS condition="$areatype!=''">$areatype</CLASS><CLASS condition="$areatype=''">StdArea</CLASS></CLASS>
	<ROOM id="other_rooms" merge=true insert="hallway_rooms,interior_rooms,leaf_rooms" />
	<BEHAVIOR condition="$theme='random'" class="RandomTraps" parms="mintraps=1 maxtraps=3 rooms=Y exits=Y" />
</AREA>
<AREA id="grid_dungeon" merge=true like="maze_dungeon" layout="GRIDCITY" requires="areaname=$,areasize=int,level_range=int,aggrochance=int,theme=random" >
</AREA>
<AREA id="square_dungeon" merge=true like="maze_dungeon" layout="BOXCITYSQUARE" requires="areaname=$,areasize=int,level_range=int,aggrochance=int,theme=random" >
</AREA>
<AREA id="box_dungeon" merge=true like="maze_dungeon" layout="BOXCITY" requires="areaname=$,areasize=int,level_range=int,aggrochance=int,theme=random" >
</AREA>
<AREA id="cross_dungeon" merge=true like="maze_dungeon" layout="CROSS" requires="areaname=$,areasize=int,level_range=int,aggrochance=int,theme=random" >
</AREA>
<AREA id="tree_dungeon" merge=true like="maze_dungeon" layout="TREE" requires="areaname=$,areasize=int,level_range=int,aggrochance=int,theme=random" >
</AREA>

<AREA id="random_dungeon" merge=true select="any" requires="areaname=$" 
	insert="maze_dungeon,grid_dungeon,square_dungeon,box_dungeon,cross_dungeon,tree_dungeon" 
	predefine="areasize=$randomareasize,level_range=$randomlevelrange,aggrochance=10+$level_range,theme=$randomtheme" >
</AREA>

<string id="randomareasize" select="any-1">
	<string condition="$areasize!=''">$areasize</string>
	<string condition="$areasize=''">30?60</string>
</string>

<string id="randomlevelrange" select="any-1">
	<string condition="$level_range!=''">$level_range</string>
	<string condition="$level_range=''">1?91</string>
</string>

<string id="randomtheme" merge=true select="any-1">
	<string condition="$theme!=''">$theme</string>
	<string condition="$theme=''">random</string>
</string>

<STRING id="subtheme_adjusted_name" select="any-1" merge=true>
	<STRING condition="$adj_subtheme=''">${STAT:NAME}</STRING>
	<STRING condition="$adj_subtheme!=''">(a(n)) ${l:adj_subtheme} ${STAT:NAME}</STRING>
</STRING>

<STRING id="subtheme_adjusted_display" select="any-1" merge=true>
	<STRING condition="$adj_subtheme=''">${STAT:DISPLAY}</STRING>
	<STRING condition="$adj_subtheme!=''">(a(n)) ${l:adj_subtheme} ${STAT:DISPLAY}</STRING>
</STRING>

<STRING load="/resources/randareas/inc_forest.xml" />
<STRING load="/resources/randareas/inc_plains.xml" />
<STRING load="/resources/randareas/inc_snow.xml" />
<STRING load="/resources/randareas/inc_jungle.xml" />
<STRING load="/resources/randareas/inc_swamp.xml" />
<STRING load="/resources/randareas/inc_mountains.xml" />
<STRING load="/resources/randareas/inc_desert.xml" />
<STRING load="/resources/randareas/inc_town.xml" />
<STRING load="/resources/randareas/inc_prison.xml" />
<STRING load="/resources/randareas/inc_rats.xml" />
<STRING load="/resources/randareas/inc_lair.xml" />

</AREADATA>
