BEHAVIOR_ACTIVETICKER=\
Behavior   : ActiveTicker\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
A base class for mobile type behaviors.  Do not use.

BEHAVIOR_CORPSELOOTER=\
Behavior   : CorpseLooter\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
This behavior makes a mob loot the corpses killed by it of items only.  \
It does this by turning on the mobs AUTOLOOT flag.

BEHAVIOR_CONQUERABLE=\
Behavior   : Conquerable\n\r\
Targets    : AREAs\n\r\
Parameters : (JOURNAL="[JOURNAL NAME]") (LAW=(TRUE/FALSE))\n\r\
Example    : \n\r\
Example    : JOURNAL="The Conquest Times" LAW=FALSE\n\r\
Description: \n\r\
This behavior makes the area conquerable by clans using items put together \
using ClanCraft.  See the general help on CONQUEST for more information on \
what this means and how it works.  The JOURNAL entry, if given, will log \
conquest events to a journal of that name.  The LAW entry is required in order \
to allow an area to be set up by conquering clans with a system of law.

BEHAVIOR_GOLDLOOTER=\
Behavior   : GoldLooter\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
This behavior makes a mob loot the gold from corpses killed by it.  \
It does this by turning on the mobs AUTOGOLD flag.

BEHAVIOR_FASTERROOM=\
Behavior   : FasterRoom\n\r\
Targets    : Rooms, Areas\n\r\
Parameters : (HEALTH=[NUM BURST TICKS]) (BURST=[NUM BURST TICKS])\n\r\
Example    : burst=2\n\r\
  Example  : health=5\n\r\
  Example  : burst=2 health=5\n\r\
Description: \n\r\
This allows a room to give an extra burst of speed to all the mobs in the \
room or rooms with this behavior. The two parameters are each optional.  \
If the "health" parameter is given, then the mob will get a number of regen \
ticks equal to the number given.  For instance, if the value is 2, then the \
mob will regen twice per tick, a value of 3 means 3 times per tick, etc.  \
Values of 1 or less mean no extra regen ticks.  The "burst" parameter refers \
to bursts of extra speed to the mobs in the room equal to the number given. \
For instance, if the value is 2, the mob will move twice as fast per tick, \
a value of 3 means 3 times as fast, etc.  Values of 1 or less mean normal \
ticking applies.

BEHAVIOR_AGGRESSIVE=\
Behavior   : Aggressive\n\r\
Targets    : MOBs\n\r\
Parameters : aggression masks\n\r\
Example    : +elf -fighter\n\r\
Description: \n\r\
Makes the mob attack any player mob it can detect in the same room, from \
the moment the new mob enters.  Horribly wounded mobs are not aggressive. \
If no other parameters are given, \
the mob will attack anyone. Valid aggressive masks include:  \n\r\
delay=x (makes the mob delay x ticks before looking for a victim) \n\r\
mobkiller (makes this behavior attack mobs as well as players) \n\r\
<ZAP=spare> 
 
BEHAVIOR_ALIGNHELPER=\
Behavior   : AlignHelper\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
Joins a fight on the side of anyone who is the same alignment as the mob. 

BEHAVIOR_ANTIVAGRANT=\
Behavior   : AntiVagrant\n\r\
Targets    : MOBs\n\r\
Parameters : min, max ticks, a percent chance, anywhere and/or kickout flag\n\r\
Example    : min=2 max=3 chance=99\n\r\
Example    : min=2 max=3 chance=99 KICKOUT\n\r\
Example    : min=2 max=3 chance=75 ANYWHERE\n\r\
Example    : min=2 max=3 chance=75 ANYWHERE KICKOUT\n\r\
Description: \n\r\
Wakes up any MOB that is sleeping on a CityStreet type locale.  Will also stand up \
anyone sitting on a city street.  The locale type can be overridden by including \
the ANYWHERE flag.  You may also get the person kicked out of the current room \
by using the KICKOUT flag.  All of the parameters are optional.

BEHAVIOR_ARREST=\
Behavior   : Arrest\n\r\
Targets    : Areas\n\r\
Parameters : blank, the word "custom", or the name of a formatted INI file in resources\n\r\
Example    : laws_mycity.ini\n\r\
Example    : custom\n\r\
Description: \n\r\
This powerful behavior allows you to set up the enforcement of laws inside of a city. \
The only parameter is the name of an ini file in the resources directory.  If left \
blank, the default laws.ini file will be used.  The ini file specifies the judges, \
enforcement mobs, the laws and their punishments, and the location of jails.  The \
messages seen by the criminals is also contained therein.  The word custom may \
also be placed in the parameters in order to make the area laws changable using \
either a StdLawBook or a GenLawBook.

BEHAVIOR_BEGGAR=\
Behavior   : Beggar\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
The mob with this behavior will beg for money from players, and say thank you when rewarded.

BEHAVIOR_BRIBEGATEGUARD=\
Behavior   : BribeGateGuard\n\r\
Targets    : MOBs\n\r\
Parameters : Price of entry, Gate System\n\r\
Example    : price=5 gates=Avalon\n\r\
Description: \n\r\
The mob will work akin to a gate guard, but you have to have at least the \
price on your tab for the guard to open it (or let you open it from that side) \
Any payment made over the price is retained, in a manner akin to a bank chain, \
so if any other guards are in the same Gate System, they will all use the same \
tab.  DO NOT put one on each side - unlike Gate Guards, these guys don't play \
well with others. If you want players to be able to sneak by them, merely make \
sure they can't see sneaking or invis - whichever.  The hiding player will have \
to wait for another player to get the door open to sneak through.

BEHAVIOR_BROTHERHELPER=\
Behavior   : BrotherHelper\n\r\
Targets    : MOBs\n\r\
Parameters : optional max fighters\n\r\
Example    : \n\r\
Example    : 5\n\r\
Description: \n\r\
Joins a fight on the side of an identical mob, or a mob from the same \
starting room.  You may optionally specify the maximum number of brothers \
who may assault a single target.

BEHAVIOR_CLANHELPER=\
Behavior   : ClanHelper\n\r\
Targets    : MOBs\n\r\
Parameters : Clan to make this mob a member of\n\r\
Example    : McElvy\n\r\
Description: \n\r\
Joins a fight on the side of a mob of the same clan as specified in the parameters.

BEHAVIOR_RACEHELPER=\
Behavior   : RaceHelper\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
Joins a fight on the side of an identical mob, or one of the same race.

BEHAVIOR_FAITHHELPER=\
Behavior   : FaithHelper\n\r\
Targets    : MOBs\n\r\
Parameters : Faith to make this mob a member of\n\r\
Example    : Odin\n\r\
Description: \n\r\
Joins a fight on the side of a mob of the same faith as specified in the parameters.

BEHAVIOR_CLERICNESS=\
Behavior   : Clericness\n\r\
Targets    : MOBs\n\r\
Parameters : (SUBCLASS NAME) (OFFENSIVE,DEFENSIVE,MIXEDOFFENSIVE,MIXEDDEFENSIVE)\n\r\
Example    : \n\r\
Example    : Templar\n\r\
Example    : Doomsayer OFFENSIVE\n\r\
Description: \n\r\
An extension of CombatAbilities, this behavior makes the mob a Cleric by class, \
and gives the mob clerical prayers appropriate to its alignment and level.  After \
this behavior has triggered, it will often require a RESET for any alignment or \
level changes to the mob to take over. 

BEHAVIOR_COMBATABILITIES=\
Behavior   : CombatAbilities\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
Gives the mob the urge to use their skills, spells, prayers, songs, and other \
abilities during combat. 

BEHAVIOR_CORPSEEATER=\
Behavior   : CorpseEater\n\r\
Targets    : MOBs\n\r\
Parameters : min, max ticks, a percent chance, corpse masks\n\r\
Example    : min=10 max=20 chance=75\n\r\
Example    : min=10 max=20 chance=75 -LEVEL +<17\n\r\
Example    : min=10 max=20 chance=75 -RACE +Elf\n\r\
Description: \n\r\
The mob will appear to eat any corpse it comes across.  You may also \
specify masks to give the mob a more specific diet.  The following \
are valid masks: \n\r\
<ZAP=dont eat> 

BEHAVIOR_DECAY=\
Behavior   : Decay\n\r\
Targets    : MOBs, Items\n\r\
Parameters : min, max ticks, a percent chance, trigger masks\n\r\
Example    : min=10 max=20 chance=75\n\r\
Example    : min=10 max=20 chance=75 -LEVEL +<17\n\r\
Example    : min=10 max=20 chance=75 -CLASS +Paladin\n\r\
Description: \n\r\
According to the timing and percent chance described by the parameters, the \
mob or item with this behavior will vanish at the expired time.  MOBs do not \
begin their countdown until attacked, items when they are picked up, \
weapons when they are first wielded, or armor when it is first worn.  The \
countdown may also depend on whether the mob or player triggering the countdown \
meets any masks specified.   Value masks include: \n\r\
<ZAP=ignore> 

BEHAVIOR_DOORWAYGUARDIAN=\
Behavior   : DoorwayGuardian\n\r\
Targets    : MOBs\n\r\
Parameters : a doorway direction, followed by an optional list \n\r\
  Example  : of masking parameters described below\n\r\
Example    : north\n\r\
  Example  : east -class +mage -race +elf -evil\n\r\
Description: \n\r\
The mob will not allow any other mob or player to open or move through a doored \
exit.  The mob must be killed to get by!  If a direction is not specified, the \
mob will protect all exits, otherwise only the one in the direction specified. \
The guard will also behave according to whether the player trying to move meets \
the other parameter requirements.  If no other parameters are given, the guard \
will always block the players. Valid parameters include:  \n\r\
<ZAP=disallow> 

BEHAVIOR_DROWNESS=\
Behavior   : Drowness\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
The behavior of the drow differs slightly between males and females.  This behavior is \
therefore an entire kit, including weapons, armor, spells, and combat behavior.  DO NOT \
(I repeat) DO NOT use this behavior with any CombatAbilities derivitive, unless you want \
an unfair and utterly deadly opponent.  Also, do NOT add any equipment to the mob with this \
behavior.  The kit will supply the mob with weapons and armor.

BEHAVIOR_SOUNDER=\
Behavior   : Sounder\n\r\
Targets    : Room, MOBs, Items, Areas\n\r\
Parameters : (Max/Min ticks;) ([EMOTE CODE] [EMOTE STRING];) \n\r\
Example    : sound 80 wiggles his bottom.;sound 60 smiles evilly.;sound 20 burps!\n\r\
Example    : min=20 max=20;wear $p looks good on you.;remove Now you don't look so good.;remove_room $n doesn't look so good.\n\r\
\n\r\
An alternative to the Emoter behavior, this allows you to create very simple \
emoting triggers based on percent chances every tick, or based on event triggers \
such as getting an item, or leaving a room.  Each emote trigger is semicolon (;) \
separated, and the first trigger may instead be a set of ticks.  Valid emote codes \
include the following:\n\r\
SOUND [PCT CHANCE] - every min/max ticks, this will be emoted % chance of the time.\n\r\
GET - if an item is gotten (or THE item), this will emote to the getter.\n\r\
GET_ROOM - if an item is gotten (or THE item), this will emote to the room (not the getter).\n\r\
DROP - if an item is dropped (or THE item), this will emote to the getter.\n\r\
DROP_ROOM - if an item is dropped (or THE item), this will emote to the room (not the getter).\n\r\
EAT - if an item is eaten (or THE item), this will emote to the eater.\n\r\
EAT_ROOM - if an item is eaten (or THE item), this will emote to the room (not the getter).\n\r\
MOUNT - if an item is mounted (or THE item), this will emote to the mounter.\n\r\
MOUNT_ROOM - if an item is mounted (or THE item), this will emote to the room (not the getter).\n\r\
DRINK - if an item is drunk (or THE item), this will emote to the drinker.\n\r\
DRINK_ROOM - if an item is drunk (or THE item), this will emote to the room (not the getter).\n\r\
SIT - if an item is sat on (or THE item), this will emote to the sitter.\n\r\
SIT_ROOM - if an item is sat on (or THE item), this will emote to the room (not the getter).\n\r\
SLEEP - if an item is slept on (or THE item), this will emote to the sleeper.\n\r\
SLEEP_ROOM - if an item is slept on (or THE item), this will emote to the room (not the getter).\n\r\
WEAR - if an item is worn (or THE item), this will emote to the wearer.\n\r\
WEAR_ROOM - if an item is worn (or THE item), this will emote to the room (not the getter).\n\r\
HOLD - if an item is held (or THE item), this will emote to the wearer.\n\r\
HOLD_ROOM - if an item is held (or THE item), this will emote to the room (not the getter).\n\r\
WIELD - if an item is wielded (or THE item), this will emote to the wearer.\n\r\
WIELD_ROOM - if an item is wielded (or THE item), this will emote to the room (not the getter).\n\r\
REMOVE - if an item is removed (or THE item), this will emote to the remover.\n\r\
REMOVE_ROOM - if an item is removed (or THE item), this will emote to the room (not the getter).\n\r\
PORTAL_ENTER - if the room is entered, this will emote to the one entering.\n\r\
PORTAL_ENTER_ROOM - if the room is entered, this will emote to the others in the room.\n\r\
PORTAL_EXIT - if the room is left, this will emote to the one leaving.\n\r\
PORTAL_EXIT_ROOM - if the room is left, this will emote to the others in the room.\n\r\
\n\r\
The emote strings may be any text, and the following codes may be included:\n\r\
$p - the name of the item with the behavior.\n\r\
$n - the name of the source of the emote, or the source of the trigger.\n\r\
$e - the he/she of $n.\n\r\
$s - the his/her of $n.

BEHAVIOR_EMOTER=\
Behavior   : Emoter\n\r\
Targets    : Room, MOBs, Items, Areas\n\r\
Parameters : Flags, Max/Min ticks, pct chance, emote strings, ';' separated.\n\r\
Example    : min=10 max=20 chance=25;wiggles his bottom.;smiles evilly.;burps!\n\r\
Example    : smell chance=25;smells horrible!;is really stinky!\n\r\
Example    : broadcast sound chance=25;grumbles!;eeeks!\n\r\
Description: \n\r\
This behavior defines a serious of random emotes.  All emote strings are separated \
by the semicolons shown above.  The first parameter can be empty for defaults, \
or may contain a setting for minimum ticks (min=10), maximum ticks (max=20), \
the percept chance of occurrence after the random number of ticks has expired \
(chance=25), a tag to make the emote sound based (sound), a tag to make the \
emote smell based (smell), or a tag to make the emote broadcast to adjacent \
rooms (broadcast).  In the first example every 10-20 ticks, there is a 25% \
chance that the object with this property will select one of the emotes \
randomly and perform it for all those in the same room who can see it.  In the \
second example, a smell based emote will be performed 25% of the time.  In the \
last example, a sound based emote will be performed 25% of the time in the \
room of the behavior, and in any adjacent rooms.

BEHAVIOR_FIGHTERNESS=\
Behavior   : Fighterness\n\r\
Targets    : MOBs\n\r\
Parameters : Empty, or a subclass name\n\r\
Example    : Fighter\n\r\
Example    : Paladin\n\r\
Description: \n\r\
An extension of CombatAbilities, this behavior makes the mob a Fighter by class, \
and gives the mob fighter skills appropriate to its level.  After \
this behavior has triggered, it will often require a RESET for any \
level changes to the mob to take over. 

BEHAVIOR_DRUIDNESS=\
Behavior   : Druidness\n\r\
Targets    : MOBs\n\r\
Parameters : (SUBCLASS NAME) (OFFENSIVE,DEFENSIVE,MIXEDOFFENSIVE,MIXEDDEFENSIVE)\n\r\
Example    : \n\r\
Example    : Druid\n\r\
Example    : SkyWatcher DEFENSIVE\n\r\
Description: \n\r\
An extension of CombatAbilities, this behavior makes the mob a Druid by class, \
and gives the mob druid skills appropriate to its level.  After \
this behavior has triggered, it will often require a RESET for any \
level changes to the mob to take over. 

BEHAVIOR_BARDNESS=\
Behavior   : Bardness\n\r\
Targets    : MOBs\n\r\
Parameters : (SUBCLASS NAME) (OFFENSIVE,DEFENSIVE,MIXEDOFFENSIVE,MIXEDDEFENSIVE)\n\r\
Example    : \n\r\
Example    : Bard\n\r\
Example    : Prancer MIXEDOFFENSIVE\n\r\
Description: \n\r\
An extension of CombatAbilities, this behavior makes the mob a Bard by class, \
and gives the mob bard songs appropriate to its level.  After \
this behavior has triggered, it will often require a RESET for any \
level changes to the mob to take over. 

BEHAVIOR_COMMONSPEAKER=\
Behavior   : CommonSpeaker\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
This behavior makes sure that a mob is always speaking Common, even if it should \
be a race other than Human, or it should be polymorphed.

BEHAVIOR_FIGHTFLEE=\
Behavior   : FightFlee\n\r\
Targets    : MOBs\n\r\
Parameters : min, max ticks, and a percent chance\n\r\
Example    : min=10 max=20 chance=75\n\r\
Description: \n\r\
According to the timing and percent chance described by the parameters, the \
mob or item with this behavior will flee during combat.

BEHAVIOR_RANDOMMONSTERS=\
Behavior   : RandomMonsters\n\r\
Targets    : Areas, Rooms\n\r\
Parameters : [min/max ticks] [% chance] [min/max monsters] [locale mask]; [xml/filename]\n\r\
Example    : min=10 max=20 chance=75 minmonsters=1 maxmonsters=10;monsters.cmare\n\r\
Example    : minmonsters=10 maxmonsters=20 -ALL +CITY;criminals.cmare\n\r\
Example    : minmonsters=10 maxmonsters=20 ;<MOBS><MOB>..etc..\n\r\
Description: \n\r\
This behavior will read a list of monsters from a CMARE file of mobs generated \
using the "EXPORT AREA MOBS" or "EXPORT ROOM MOBS" command.  The path to this \
file should be the last parameter, following a semicolon.  The path is considered \
relative to the CoffeeMud resources directory.  The xml from such \
a file may also be pasted in as the last parameter instead. \n\r\
\n\r\
The parameters \
before the semicolon describe the rate and amount of monsters generated.  \
The room or area will attempt to generate a monster every (min) to (max) \
ticks, assuming the percent chance (chance) is made.  It will then generate \
at least the minimum (minmonsters) number of monsters from the list, but \
never more than the maximum (maxmonsters) number of monsters.  Duplicates \
are allowed.  Monsters who die will be replaced by this behavior, even if \
they wander out of the room or area.  If the behavior is on a room, all \
monsters will be generated in that room.  If on an area, a random room in \
the area will be picked for the monster. The TYPE of room in that area which \
will be selected for population may also be specified. \
-ALL to disallow all locales, followed by +AIR +CITY +JUNGLE (etc) to \
reallow certain locales.  -CITY -UNDERWATER and others may be used to \
restrict certain locales.  If no locale types are specified, then all rooms \
in an area will be populatable.  By default, non-flying mobs will never be \
generated in air rooms, nor will non-swimming mobs be generated underwater.


BEHAVIOR_FOLLOWER=\
Behavior   : Follower\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
The mob with this behavior will follow any other mob that leaves the room.

BEHAVIOR_GATEGUARD=\
Behavior   : GateGuard\n\r\
Targets    : MOBs\n\r\
Parameters : a list of masking parameters described below\n\r\
Example    : -class +mage -race +elf -evil\n\r\
Description: \n\r\
When this mob is standing next to a doorway and a player enters, the mob will open \
the door for the player, and close it after them.  The guard will also lock the door \
at night, if the door has a lock.  The guard will behave according to whether \
any players in the room meet the parameters.  If no parameter is given, the \
guard will always follow the behavior. Valid parameters include:  \n\r\
keeplocked (if the door has a lock, the mob will make sure it remains so \n\r\
allnight (does not operate differently at night than the day)\n\r\
<ZAP=disallow> 

BEHAVIOR_GETSALLEQUIPPED=\
Behavior   : GetsAllEquipped\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
This is a deprecated behavior, but listed here in case someone can think of \
a new use for it.  This behavior causes the mob, on reset, to grab everything \
in its default room, and attempt to wear it. 

BEHAVIOR_GOODEXECUTIONER=\
Behavior   : GoodExecutioner\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
The mob with this behavior will attack any evil or thief non-player mob it \
detects.

BEHAVIOR_GOODGUARDIAN=\
Behavior   : GoodGuardian\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
This is a very active behavior.  If the mob detects any evil mob attacking \
a good mob in the same room, or an adjacent room, it will attack the evil \
mob.  If evil mobs are fighting, it will do nothing.  If two good or neutral \
mobs are fighting, it will stop the fight.

BEHAVIOR_GUARD=\
Behavior   : Guard\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
If ANY mob, player or non-player, is attacked in the same room as the mob with \
this behavior, this mob will come to the victim's defense.

BEHAVIOR_HEALER=\
Behavior   : Healer\n\r\
Targets    : MOBs\n\r\
Parameters : min, max ticks, and a percent chance\n\r\
Example    : min=10 max=20 chance=75\n\r\
Description: \n\r\
The mob with this behavior gains Cure Disease, Cure Light Wounds, Cure \
Serious Wounds, Bless, and Sanctuary.  At random, the mob will cast these \
spells on any player-mobs in the room.

BEHAVIOR_HIRELING=\
Behavior   : Hireling\n\r\
Targets    : MOBs\n\r\
Parameters : price to hire;minutes of service\n\r\
Example    : 10000;30\n\r\
Description: \n\r\
Allows a mob to hire him or herself out for a given amount of time. \
The first parameter is the price to hire the mob, followed by a semicolon \
and the number of minutes that amount of money purchases.  Additional money \
may be given by the player to extend the time.  When the time expires, the \
mob returns to his or her start room.

BEHAVIOR_INSTANTDEATH=\
Behavior   : InstantDeath\n\r\
Targets    : MOBs, Items, Rooms, Areas\n\r\
Parameters : min, max ticks, and a percent chance\n\r\
Example    : min=10 max=20 chance=75\n\r\
Description: \n\r\
According to the timing and percent chance described by the parameters, the \
item owner with this behavior will be killed.  MOBs and Rooms with this \
behavior will kill all their inhabitants.  MOBs do not \
kill until attacked, food when eaten, drinks when sipped \
items when they are picked up, weapons when they are first wielded, \
or armor when it is first worn.  Rooms merely need to be entered.

BEHAVIOR_ITEMMENDER=\
Behavior   : ItemMender\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
For a price, this mob will repair damaged weapons and armor.  \
The mender will NOT work for Archons, however.

BEHAVIOR_ITEMREFITTER=\
Behavior   : ItemRefitter\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
For a price, this mob will resize armor to fit the mob.  \
The mender will NOT work for Archons, however.

BEHAVIOR_ITEMIDENTIFIER=\
Behavior   : ItemIdentifier\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
For a price, this mob will identify items.  \
They will NOT work for Archons, however.

BEHAVIOR_MAGENESS=\
Behavior   : Mageness\n\r\
Targets    : MOBs\n\r\
Parameters : (SUBCLASS NAME) (OFFENSIVE,DEFENSIVE,MIXEDOFFENSIVE,MIXEDDEFENSIVE)\n\r\
Example    : \n\r\
Example    : Mage\n\r\
Example    : Illusionist MIXEDDEFENSIVE\n\r\
Description: \n\r\
An extension of CombatAbilities, this behavior makes the mob a Mage by class, \
and gives the mob mage spells appropriate to its level.  After \
this behavior has triggered, it will often require a RESET for any \
level changes to the mob to take over.

BEHAVIOR_LINKEDWEATHER=\
Behavior   : LinkedWeather\n\r\
Targets    : Areas\n\r\
Parameters : [Area Name](;ROLLING)\n\r\
Example    : My Area\n\r\
Example    : My Area;ROLLING\n\r\
Description: \n\r\
This behavior forces the area to always mimic the weather of another area \
on your map.  That area is determined by the parameters.  The normal behavior \
is for the weather of the given area to always be the same as the linked area. \
If the area name in the parameters is followed by a semicolon and the word \
ROLLING, then the area instead will always take on the weather of the linked \
area on its next weather change, meaning that the linked area's weather will \
seem to "roll" into this area on every weather change.

BEHAVIOR_MIME=\
Behavior   : Mime\n\r\
Targets    : MOBs, Items, Exits, Rooms\n\r\
Parameters : min, max ticks, and a percent chance\n\r\
Example    : min=10 max=20 chance=75\n\r\
Description: \n\r\
This amazingly annoying Behavior makes the thing mimic any emotes or socials \
done by a player in the same room, back to that player.

BEHAVIOR_MOBEATER=\
Behavior   : MOBEater\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
This behavior allows a mob to eat other mobs or players, and digest them!  The chance runs \
at about 5% every two ticks during combat.  Great for dragons!

BEHAVIOR_MOBHELPER=\
Behavior   : MOBHelper\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
The mob with this behavior will come to the defense of any non-player mob \
which is attacked in its presence.

BEHAVIOR_COMBATASSISTER=\
Behavior   : CombatAssister\n\r\
Targets    : MOBs\n\r\
Parameters : mask of mobs to assist\n\r\
Example    : -RACE +Elf\n\r\
Example    : -NAME "+My Buddies"\n\r\
Example    : -CLANS "+My Clan"\n\r\
Description: \n\r\
The mob with this behavior will come to the defense of any other mob \
which is attacked in its presence and meets the mask defined above.  \n\r\
Valid masks include: \n\r\
<ZAP=ignore>


BEHAVIOR_MOBHUNTER=\
Behavior   : MOBHunter\n\r\
Targets    : MOBs\n\r\
Parameters : min, max ticks, room radius, a percent chance, mask of mobs to hunt\n\r\
Example    : min=600 max=1200 chance=99 radius=50 -RACE +Human\n\r\
Example    : min=50 max=1200 chance=75 -NAME "+Evil Wizards"\n\r\
Description: \n\r\
This behavior will cause the mob to seek out a victim within the RADIUS \
number of rooms from where he is.  The mob will then hunt down and \
assassinate the victim.  The mob will begin the hunt according to the \
frequency defined by the parameters.  The MIN and MAX parms decide \
the minimum number of ticks to wait between hunts, and the CHANCE parm \
determines the chance the hunt will begin at that time.  The RADIUS \
is the number of rooms away from the mobs current room in which a \
victim will be sought.  The rest of the parameters are a mask to \
determine who would make a good victim.  Valid masks include: \n\r\
<ZAP=spare>

BEHAVIOR_MOBILE=\
Behavior   : Mobile\n\r\
Targets    : MOBs\n\r\
Parameters : min, max ticks, a percent chance, flags, locale parms\n\r\
Example    : min=10 max=20 chance=75 wander -air -underwater\n\r\
Example    : min=10 max=20 chance=75 opendoors\n\r\
Example    : min=10 max=20 chance=75 leash=3 opendoors\n\r\
Description: \n\r\
According to the timing and percent chance described by the parameters, the \
mob with this behavior will travel in a random available direction. The \
wander flag is required if the mob is allowed to leave his or her area. \
The opendoors flag will allow the mob to open closed doors when walking \
around, or to unlock locked doors if the mob has the key. \
The leash parameter will prevent the mob from getting too far from home. \
The TYPE of room from which the mob is restricted may also be entered. \
-ALL to disallow all locales, followed by +AIR +CITY +JUNGLE (etc) to \
reallow certain locales.  -CITY -UNDERWATER and others may be used to \
restrict certain locales.

BEHAVIOR_MOBILEAGGRESSIVE=\
Behavior   : MobileAggressive\n\r\
Targets    : MOBs\n\r\
Parameters : min, max ticks, a percent chance, and masks\n\r\
Example    : min=10 max=20 chance=75 -underwater -thief +elf\n\r\
Example    : min=10 max=20 chance=75 wander -air -elf\n\r\
Description: \n\r\
According to the timing and percent chance described by the parameters, the \
mob with this behavior will travel in a random available direction. The mob \
will attack any player mob it comes across. If no other parameters are given, \
the mob will attack anyone, anywhere. The wander flag is required if the \
mob is allowed to leave his or her area. The TYPE of room from which the \
mob is restricted may also be entered. -ALL to disallow all locales, \
followed by +AIR +CITY +JUNGLE (etc) to reallow certain locales.  \
-CITY -UNDERWATER and others may be used to restrict certain locales. \
Masks may also be used to specify who the mob is likely to attack.  \
Valid aggressive masks include:  \n\r\
delay=x (makes the mob delay x ticks before looking for a victim) \n\r\
mobkiller (makes this behavior attack mobs as well as players) \n\r\
<ZAP=spare> 

BEHAVIOR_MOBILEGOODGUARDIAN=\
Behavior   : MobileGoodGuardian\n\r\
Targets    : MOBs\n\r\
Parameters : min, max ticks, a percent chance, flags, locale parms\n\r\
Example    : min=10 max=20 chance=75 wander -air -underwater\n\r\
Description: \n\r\
This is a very active behavior.  If the mob detects any evil mob attacking \
a good mob in the same room, or an adjacent room, it will attack the evil \
mob.  If evil mobs are fighting, it will do nothing.  If two good or neutral \
mobs are fighting, it will stop the fight. This mob is also mobile, which \
means the mob will move around the area. The wander flag is required if the \
mob is allowed to leave his or her area. The TYPE of room from which the \
mob is restricted may also be entered. -ALL to disallow all locales, \
followed by +AIR +CITY +JUNGLE (etc) to reallow certain locales.  \
-CITY -UNDERWATER and others may be used to restrict certain locales.

BEHAVIOR_MOBRESAVE=\
Behavior   : MOBReSave\n\r\
Targets    : MOBs\n\r\
Parameters : min, max ticks, a percent chance\n\r\
Example    : min=140 max=140 chance=100\n\r\
Description: \n\r\
This behavior allows the mob with it to be updated in the CoffeeMud database \
according to the frequency defined by min, max ticks.  This behavior is tricky \
to set up the first time. When you know you are going to want an updating mob in \
a room, you should first go to the room and create a GenMob with this behavior \
(no parameters needed).  Wait a few seconds, and you will see the GenMob that you \
created has disappeared.  Now you are free to add this behavior to one or more \
other mobs at your leisure.  Don't forget to resave the room when you are done!


BEHAVIOR_MOBTEACHER=\
Behavior   : MOBTeacher\n\r\
Targets    : MOBs\n\r\
Parameters : Char class name(s), ability name(s), nocommon flag,\n\r\
Parameters : percentages, or empty to teach all skills.\n\r\
Example    : mage evoker illusionist transmuter\n\r\
Example    : 100% mage 10% Thief_Steal NOCOMMON\n\r\
Example    : Spell_Sleep 5% Spell_Wish\n\r\
Example    : Spell_BurningHands\n\r\
Description: \n\r\
This behavior makes the mob suitable to teach skills, spells, prayers, or \
songs, as specified in the parameters.  If the parameter is empty, the \
mob will be able to teach all abilities.  If the parameter contains the \
name of a character class, the mob will only teach abilities of that class. \
*Any* class may always practice with a MOBTeacher, but the mob may only \
teach those abilities for the character class the parameters describe.  \
The classes listed by mob teacher are NOT base classes.  To have a teacher \
able to teach skills from an entire base class, all sub-classes must be \
listed. \n\r\
Percentages may be included inside the parameters as well.  The percentage \
will always apply only to the character classes or spells listed after the \
percentage, not before.  Encountering another percentage entry will override \
the previous.  A percentage will dictate the chance that a given spell will \
be known by the teacher, or the chance that a particular spell in a given \
character class will be known.

BEHAVIOR_MONEYCHANGER=\
Behavior   : MoneyChanger\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
Whenever a player gives the money changer coins, the money changer will give back to \
the player a bag containing a number of high-denomination notes.  The notes are \
considerably lighter than the gold would be.

BEHAVIOR_MUDCHAT=\
Behavior   : MudChat\n\r\
Targets    : MOBs\n\r\
Parameters : optional chat-mob-type\n\r\
Example    : smurf\n\r\
Description: \n\r\
Allows the mobs to speak and respond to speech.  The chat.dat file, from which \
speech behavior is derived, contains many "templates" for different speech \
behaviors.  MudChat will attempt to choose the correct speech behavior for \
the mob based on the mobs name.  This may be overridden by specifying a \
speech behavior in the parameters.  Speech patterns in the chat.dat at \
present include:\n\r\
default\n\r\
dog fido beastly fido_dog\n\r\
cat kitten lion\n\r\
pig boar\n\r\
doll toy\n\r\
papa_smurf smurf\n\r\
monster\n\r\
smurfette\n\r\
healer cleric doctor

BEHAVIOR_MOVINGROOM=\
Behavior   : Mover\n\r\
Targets    : Rooms\n\r\
Parameters : min=3 max=3 chance=100;[xmlsection];[ticks at stops];[ticks between stops] \n\r\
Example    : min=3 max=3 chance=100;SUBWAY;3;10\n\r\
Description: \n\r\
The above example would set the room's parameters to the ones listed in the SUBWAY \
section of the file resources/moving.xml.  There is a subway example already there. \n\r\
NOTE!      : The follow conditions -must- be met before setting the room to this behaviour. \n\r\
1. \n\r\
The rooms that you want this room to open out to -must- already be defined before \
you make the XML section. \n\r\
2. \n\r\
The XML document -must- be writen before you set this behaviour. \n\r\
3. \n\r\
You -cannot- have the moving room override an exit, ie. if room A links south to Room B \n\r\
you cannot have the mover link north to room A.\n\r\
******************* \n\r\
XML DOCUMENT NOTES: \n\r\
******************* \n\r\
You can use the following strings in the XML document to be translated on the fly \n\r\
$disproom  : if mover is at a stop this is the room it is opened to otherwise \n\r\
. Example  : this is the next room that this room will open too. \n\r\
$inopendir : this is the direction the door on the inside (the mover) opens. \n\r\
$outopendir: this is the direction the door on the outside (where the mover stoped) opens. \n\r\
$traveldir : this is the current direction that the room is moving in. \n\r\
 \n\r\
<STOPS> here you would list the ROOMID of each room the mover will stop at example.\n\r\
<STOP1>[first stop]</STOP1>n\r\
 \n\r\
<NORMALDIRECTION> and <REVERSEDIRECTION> \n\r\
-in these tags you define the parameters for the mover while is is going back and forth. \n\r\
-normal is stop1 to stopwhatever and reverse is stopwhatever to stop1. \n\r\
-TRAVELDIRECTION = the direction it is traveling from point a to point b. \n\r\
-DOORSDIRECTION = the direction the doors open out of the mover. \n\r\
--<INSIDE> and <OUTSIDE> \n\r\
---in these tags you define what is echoed to the client in the mover and outside. \n\r\
---ARRIVALINFO = what is echoed when the room gets to the stop \n\r\
---DEPARTINFO = what is echoed when the room leaves the stop \n\r\
<ROOMDESCRIPTIONS> \n\r\
-here you define what is appended to the end of the room descriptions. \n\r\
-<NORMALDIRECTION> and <REVERSEDIRECTION> \n\r\
--<INSIDE> and <OUTSIDE> \n\r\
---DOOROPENED = if the door is opened append this.\n\r\
---DOORCLOSED = if the door is closed append this.\n\r\
 \n\r\
There are two examples in the XML document you can look at for further info. \n\r\
 \n\r\
Ideas for this would be, subways, busses, wagon trains (caravans) spaceships, \
stargates, everchanging paths in mazes, elevators, ect.

BEHAVIOR_NICEABILITIES=\
Behavior   : NiceAbilities\n\r\
Targets    : MOBs\n\r\
Parameters : min, max ticks, and a percent chance\n\r\
Example    : min=10 max=20 chance=75\n\r\
Description: \n\r\
According to the timing and percent chance described by the parameters, the \
mob with this behavior will use any of its benevolent abilities, including \
spells, prayers, songs, or others, for the benefit of player mobs in the \
same room.

BEHAVIOR_NOCOMBATASSIST=\
Behavior   : NoCombatAssist\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
This behavior makes sure that a mob does not assist in combat when following \
a player or another mob.

BEHAVIOR_OBJECTGUARDIAN=\
Behavior   : ObjectGuardian\n\r\
Targets    : MOBs\n\r\
Parameters : SENTINAL\n\r\
Example    : SENTINAL\n\r\
Description: \n\r\
This will cause a mob to explicitly prevent any other mob from taking or \
removing any object in the same room as the mob. You have to kill him! By \
adding SENTINAL to the parameters, the mob will be even more vigilant and \
steadfast, not letting combat or even severe damage deter him from his duty.

BEHAVIOR_PATROLLER=\
Behavior   : Patroller\n\r\
Targets    : MOBs\n\r\
Parameters : min, max ticks, and a percent chance; a path of rooms, directions\n\r\
Example    : min=10 max=20 chance=75;Midgaard#3001;#3002;#3003;RESTART\n\r\
Example    : min=10 max=20 chance=75;east;.;north;north;east\n\r\
Description: \n\r\
According to the timing and percent chance described by the parameters, the \
mob with this behavior will travel the path assigned in the parameters.  \
Cardinal directions and room numbers are all valid entries, though the \
direction or room must always be valid from the mobs current position to \
work.  The 'RESTART' parameter may be placed in the path to force the mob \
to start the path from the beginning.  If no 'RESTART' parameter is given, \
the mob will by default retrace their steps back to the beginning of the \
path.  The '.' parameter (a period) in the path will direct the mob to \
pause one step at that point.  If any doors are encountered along the \
patrol route, they will be unlocked and opened by the mob.

BEHAVIOR_PLAYERHELPER=\
Behavior   : PlayerHelper\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
The mob with this behavior will come to the defense of any player mob \
against any non-player mob.

BEHAVIOR_PUDDLEMAKER=\
Behavior   : PuddleMaker\n\r\
Targets    : Rooms, Areas\n\r\
Parameters : [PCT CHANCE]\n\r\
Example    : 34\n\r\
Description: \n\r\
The room or area with this behavior will, on the given pct chance, \
generate a puddle or some snow following an appropriate rain, sleet, \
thunderstorm, or similar weather event.  The generated snow or puddle \
will disappear (evaporate) after a time.

BEHAVIOR_RANDOMTELEPORTER=\
Behavior   : RandomTeleporter\n\r\
Targets    : Mobs\n\r\
Parameters : min, max ticks, a percent chance, (nowander) locale parms\n\r\
Example    : min=10 max=20 chance=75 -air -underwater\n\r\
Example    : min=10 max=20 chance=75 nowander\n\r\
Description: \n\r\
This behavior makes a mob which will transport himself to a random room \
on the map.  Locale parms may be given to restrict the types of rooms he \
will transport too.  A randomtransport will, by default, transport all over \
the world.  Use the nowander flag to keep him in his area.

BEHAVIOR_RESETWHOLE=\
Behavior   : ResetWhole\n\r\
Targets    : Rooms, Areas\n\r\
Parameters : # of ticks of inactivity before reset\n\r\
Example    : 4000\n\r\
Description: \n\r\
This behavior provides an alterative means of resetting your rooms and areas.  \
The system will total reset a room (mobs and items) which has not been visited \
by a player in the given amount of ticks.  Remember that a tick is about 4 seconds. \
An Area with this behavior will skip over any rooms which also have this behavior, \
allowing you to have different total reset times for certain rooms.  Of course, \
this behavior does not override the existing REJUV system for mobs and items, so \
if you would like to use the ResetWhole system exclusively, you should set the \
rejuv rate on all the mobs and items in your game to 0, which disables their \
internal rejuvination.

BEHAVIOR_RESOURCEOVERRIDE=\
Behavior   : ResourceOverride\n\r\
Targets    : Rooms\n\r\
Parameters : Space delmited list of resources.\n\r\
Example    : CORN WHEAT RICE\n\r\
Description: \n\r\
This class allows one to override the normal resources generated by \
rooms for many common skills.  This skill will randomly select from \
the list enumerated in the parameters instead of the normal list.

BEHAVIOR_ROMGANGMEMBER=\
Behavior   : ROMGangMember\n\r\
Targets    : MOBs\n\r\
Parameters : The name of the gang\n\r\
Example    : Troll\n\r\
Description: \n\r\
A silly behavior to better support ROM area files.  The mob with this behavior will attack any other \
mob which also has this behavior, but is in a different gang.  This behavior is not active when \
a mob with the ROMPatrolman is in the room.

BEHAVIOR_ROMPATROLMAN=\
Behavior   : ROMPatrolman\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
A silly behavior to better support ROM area files.  The mob with this behavior will complain whenever \
there is a fight going on in the same room.  The mob may do nothing, join the fight, or break it up.

BEHAVIOR_SCAVENGER=\
Behavior   : Scavenger\n\r\
Targets    : MOBs\n\r\
Parameters : min, max ticks, and a percent chance\n\r\
Example    : min=10 max=20 chance=75\n\r\
Description: \n\r\
According to the timing and percent chance described by the parameters, the \
mob with this behavior will attempt to pick up and take away random objects \
in the same room as the mob.  Scavengers will not do their work when a PC is \
in the room, however.

BEHAVIOR_SCRIPTABLE=\
Behavior   : Scriptable\n\r\
Targets    : MOBs, Items, Rooms\n\r\
Parameters : (see below)\n\r\
Example    : LOAD=progs/mrinfo.script~\n\r\
Description: \n\r\
This behavior allows the reactions and behaviors of the mob to be scripted. \
The parameter may be complete scripts, and/or LOAD commands as specified below. \
If you choose to use a file for your script, then each script command line \
must be terminated by a linefeed or a semicolon.  If you choose to put your entire \
script into the parameters, you must terminate EVERY line with a semicolon (;). \
\n\r\
Multiple scripts with multiple triggers may be included.  Each script and trigger \
must be separated by the ~ character.  See examples in the resources/progs directory! \
\n\r\
Now to the script itself:\n\r\
The first line must be a trigger word followed by any parameters.  Valid \
triggers and parameters are as follows:\n\r\
LOAD=[SCRIPT PATH] - insert a new script from another file.  Ex: LOAD=progs/my.script~ \n\r\
GREET_PROG [PCT CHANCE] - When players enter the room, given the chance.\n\r\
ALL_GREET_PROG [PCT CHANCE] - Same as GREET_PROG, but works with sneakers too.\n\r\
SPEECH_PROG (P) [A PHRASE]/[ONE OR MORE WORDS] - When someone says the words.\n\r\
BRIBE_PROG [AMOUNT OF GOLD] - When the amount or better is given to the monster.\n\r\
GIVE_PROG (P) [A PHRASE]/[ONE OR MORE WORDS] - When something is given to the monster.\n\r\
RAND_PROG [PCT CHANCE] - Triggers at random, given the chance.\n\r\
ONCE_PROG - Triggers on the first occurrence, but never again (until reset).\n\r\
FIGHT_PROG [PCT CHANCE] - Triggers during combat, given the chance.\n\r\
ENTRY_PROG [PCT CHANCE] - Triggers whenever the monster enters a new room.\n\r\
EXIT_PROG [PCT CHANCE] - Triggers whenever anyone exits the room of the monster.\n\r\
DEATH_PROG - When the monster dies.\n\r\
HITPRCNT_PROG [HP PCT] - When the monster reaches the hit points % remaining.\n\r\
MASK_PROG (P) [A PHRASE]/[ONE OR MORE WORDS] - When a mob performs an action with these words.\n\r\
ACT_PROG (P) [A PHRASE]/[ONE OR MORE WORDS] - When a mob performs an action with these words.\n\r\
QUEST_TIME_PROG [QUEST NAME] [TIME LEFT] - When the running quest reaches the number of minutes left.\n\r\
TIME_PROG [LIST OF HOURS] - Mob runs program at listed hours of the day.\n\r\
DAY_PROG [LIST OF DAYS] - Mob runs program at listed days of the month.\n\r\
DELAY_PROG [LOW TICKS] [HIGH TICKS] - Mob runs program at the given interval range.\n\r\
GET_PROG (P) [A PHRASE]/[ONE OR MORE WORDS] - When something is gotten by the monster.\n\r\
PUT_PROG (P) [A PHRASE]/[ONE OR MORE WORDS] - When something is put in something by the monster.\n\r\
DROP_PROG (P) [A PHRASE]/[ONE OR MORE WORDS] - When something is dropped by the monster.\n\r\
REMOVE_PROG (P) [A PHRASE]/[ONE OR MORE WORDS] - When something is removed by the monster.\n\r\
CONSUME_PROG (P) [A PHRASE]/[ONE OR MORE WORDS] - When something is ate/drank by the monster.\n\r\
WEAR_PROG (P) [A PHRASE]/[ONE OR MORE WORDS] - When something is worn/wielded by the monster.\n\r\
FUNCTION_PROG [FUNCTION NAME] - declares a runnable function, with parms in $g, see MPCALLFUNC.\n\r\
*** NOTE Phrases for MASK_PROG, GIVE_PROG, GET_PROG, PUT_PROG, REMOVE_PROG, WEAR_PROG \
and SPEECH_PROG must group words and phrases \
together using the "'" character, for instance 'a phrase' or 'multiple words'. \
The characteris unnecessary when put around single words 'word'.\n\r\
\n\r\
*** NOTE If Scriptable is placed on an Item, triggers such as GET_PROG, DROP_PROG, \
WEAR_PROG, and REMOVE_PROG will only trigger when the scripted item is involved. \n\r\
\n\r\
*** NOTE MASK_PROG and ACT_PROG will check commands as they appear to the mob with \
this behavior.  Consider perspective, vision, and word tense in light of this fact \
when wording your masks.  For instance, the purchase of a sword in a dark shop \
may be seen as 'Someone buys something from someone' instead of 'Bob buys a sword from Joe'.\n\r\
\n\r\
Following this line is your script itself.  The commands are as follows:\n\r\
IF/ENDIF/ELSE Conditional evaluations, separated by AND/OR.  The IF statement \
can group conditions with () and use the following functions as part of its \
evaluation:\n\r\
 - RAND([% CHANCE])    Random truth\n\r\
 - HAS([CODE] [ITEM NAME])  if the given mob has the specified item.\n\r\
 - WORN([CODE] [ITEM NAME])  if the given mob wears the specified item.\n\r\
 - ISNPC([CODE])  if the given mob is a non-player.\n\r\
 - ISPC([CODE])  if the given mob is a player.\n\r\
 - ISPKILL([CODE])  if the given mob has playerkill flag on.\n\r\
 - ISGOOD([CODE])  if the given mob is good.\n\r\
 - ISNAME([CODE] [WORDS])  if the given item is named with given words.\n\r\
 - NUMMOBSINAREA([MOB NAME] == [NUM]) if comparison of number of mobs of that name in area. Where == may be !=, >, <, <=, <=.\n\r\
 - NUMMOBS([MOB NAME] == [NUM]) if comparison of number of mobs of that name in world. Where == may be !=, >, <, <=, <=.\n\r\
 - NUMRACEINAREA([MOB NAME] == [NUM]) if comparison of number of mobs of that name in area. Where == may be !=, >, <, <=, <=.\n\r\
 - NUMRACES([MOB NAME] == [NUM]) if comparison of number of mobs of that name in world. Where == may be !=, >, <, <=, <=.\n\r\
 - ISEVIL([CODE])  if the given mob is evil.\n\r\
 - ISNEUTRAL([CODE])  if the given mob is neutral.\n\r\
 - ISFIGHT([CODE])  if the given mob is fighting.\n\r\
 - ISALIVE([CODE])  if the given mob is alive and available.\n\r\
 - ISIMMORT([CODE])  if the given mob is an archon.\n\r\
 - ISCHARMED([CODE])  if the given mob is charmed.\n\r\
 - STAT([CODE] [STAT] == [VALUE]) if the given mob/item has a stat of value, != is also valid.\n\r\
 - GSTAT([CODE] [STAT] == [VALUE]) like STAT, but player data accessible. See Generic.java.\n\r\
 - AFFECTED([CODE] [SPELL CLASS]) if the mob is affected by spell.\n\r\
 - ISFOLLOW([CODE])  if the given mob is following someone in the room.\n\r\
 - HITPRCNT([CODE] == [% HITS])  if the given mob has the pct chance hit points.  Where == may be >, <, !=, >=, or <=.\n\r\
 - HASTATTOO([CODE] [TATTOONAME]) whether the given mob has the given tattoo.\n\r\
 - INLOCALE([ROOM CLASS]) if the mob is in the given room type.\n\r\
 - INROOM([ROOM ID/MOB NAME]) if the mob is in the given room.\n\r\
 - ISHERE([CODE]) if the mob/item in the same room as the scripted one.\n\r\
 - VAR([CODE] [VAR NAME] == [VALUE]) if the var for the given mob has value.  Where == may be !=, >, <, >=, <=.\n\r\
 - SEX([CODE] == [M/F/N]) evaluates sex.  Where == may also be !=.\n\r\
 - POSITION([CODE] == [SLEEPING/STANDING/SITTING] Evaluates position.\n\r\
 - LEVEL([CODE] == [LVL]) evaluates level.  Where == may be !=, <, >, >=, <=.\n\r\
 - CLASS([CODE] == [CLASS NAME]) evaluates class. Where == may be !=.\n\r\
 - BASECLASS([CODE] == [CLASS NAME]) evaluates base class. Where == may be !=.\n\r\
 - RACE([CODE] == [RACE NAME]) evaluates race. Where == may be !=.\n\r\
 - RACECAT([CODE] == [RACE CAT NAME]) evaluates racial category. Where == may be !=.\n\r\
 - GOLDAMT([CODE] == [AMT]) evaluates gold or item value. Where == may be !=, >, <, >=, <=.\n\r\
 - QUESTWINNER([CODE] [QUEST NAME]) returns whether the code of the given name has won the given quest.\n\r\
 - QUESTMOB([NAME] [QUEST NAME]) returns whether the mob of the given name is a mob designated in the given quest.\n\r\
 - QUESTITEM([NAME] [QUEST NAME]) returns whether the item of the given name is an item designated in the given quest.\n\r\
 - ISQUESTMOBALIVE([NAME/NUM] [QUEST NAME]) returns whether the mob, designated in the currently running quest, is alive.\n\r\
 - ISTIME([HOUR#/DAY/DAWN/DUSK/NIGHT]) returns the time of day, or time region.\n\r\
 - ISSEASON([WINTER/SPRING/SUMMER/FALL]) returns the season.\n\r\
 - ISWEATHER([CLEAR/RAIN/SNOW/WINDY/ETC..]) returns the weather\n\r\
 - ISMOON() returns whether the scriptor can see the moon\n\r\
 - ISMOON([NEW/WAXCRESCENT/WAXQUARTER/WAXGIBBOUS/FULL/WANEGIBBOUS/ETC..]) check the moon type\n\r\
 - ISDAY([DAY#]) returns the day of the month.\n\r\
 - EVAL([CODE] == [VALUE/CODE])  if the code has value.  Where == may be !=, >, <, >=, <=.\n\r\
 - NUMBER([VALUE/CODE]) whether the given code or value is a number.\n\r\
 - RANDNUM([VALUE] == [MAX VALUE]) how the 1st code compares to rand 1..max code.\n\r\
 - ROOMMOB([NUM] [NAME]) whether the NUMth mob in the room is named NAME.\n\r\
 - ROOMITEM([NUM] [NAME]) whether the NUMth item in the room is named NAME.\n\r\
 - NUMMOBSROOM(== [NUMBER]) compares the number of mobs in the room.   Where == may be !=, >, <, >=, <=.\n\r\
 - NUMITEMSROOM(== [NUMBER]) compares the number of mobs in the room.   Where == may be !=, >, <, >=, <=.\n\r\
 - NUMITEMSMOB([NAME] == [NUMBER]) compares the number of items the mob has.   Where == may be !=, >, <, >=, <=.\n\r\
 - MOBITEM([MOBNAME] [NUM] [NAME]) whether the NUMth item owned by mob mobname is named NAME.\n\r\
 - INCONTAINER([CODE] [CONTAINER/MOUNT]) whether the item is in container or mount.\n\r\
*** NOTES! The parenthesis are REQUIRED for the above!  The brackets should NOT \
be included, they are there to designate a parameter.  Where CODE above is one of \
the following: $n=source of the action, $i=scripted mob, $t=target, $o=item1, \
$p=item2.\n\r\
\n\r\
Now we get to the executed commands.  They are as follows:\n\r\
MPASOUND [TEXT] - a noisy emote that goes to all adjacent rooms.\n\r\
MPECHO [TEXT] - an emote\n\r\
MPSLAY [MOB NAME] - utterly kill the target.\n\r\
MPJUNK [ITEM] - destroy the given item from the monsters inventory.\n\r\
MPMLOAD [MOB NAME] - create an instance of the given mob name.\n\r\
MPOLOAD [ITEM NAME] - create an instanceof the given item, give it to the mob.\n\r\
MPECHOAT [MOB NAME] [TEXT] - emote to the given mob name.\n\r\
MPECHOAROUND [TEXT] - emotes to everyone but the source of the trigger.\n\r\
MPCAST [SPELL] [MOB NAME] - casts the given spell at the given target.\n\r\
MPKILL [MOB NAME] - attack the given target.\n\r\
MPEXP [MOB NAME] [EXP] - grants amount of exp to mob and entire group.\n\r\
MPPURGE [ITEM/MOB NAME] - destroy the given target item or mob.\n\r\
MPUNAFFECT [MOB NAME] - removes all non-permanent affects from the mob.\n\r\
MPGOTO [ROOM ID/NAME/DESC] - take the monster to the given room.\n\r\
MPAT [ROOM ID/NAME/DESC] [COMMAND] - do a command at the given room.\n\r\
MPSET [MOB/ITEM] [VAR NAME] [VALUE] - use with care! sets a stat for a mob or item.\n\r\
MPGSET [MOB/ITEM] [VAR NAME] [VALUE] - like MPSET but player data accessible. See GSTAT.\n\r\
MPTRANSFER [ALL/MOB NAME] [ROOM ID/NAME/DESC] - transfer mobs to the given room.\n\r\
MPBEACON [ROOM ID/NAME/DESC] [ALL/MOB NAME] - Makes given room start room for players.\n\r\
MPFORCE [MOB NAME] [COMMAND] - force the given mob to do the given command.\n\r\
MPSETVAR [MOB NAME] [VAR NAME] [VALUE] - set a variable for the given mob.  Value may be ++, --, or preceeded by +,-,*,or /.\n\r\
MPENDQUEST [QUEST NAME] - this command will stop and shutdown the quest of the given name.\n\r\
MPSTARTQUEST [QUEST NAME] - this command will start the quest of the given name.\n\r\
MPQUESTWIN [MOB NAME] [QUEST NAME] - declares the mob a winner of the given quest.\n\r\
MPCALLFUNC [FUNC NAME] [PARMS...] - executes a FUNCTON_PROG already declared.\n\r\
MPALARM [TICKTIME] [COMMAND] - executes COMMAND after time has elapsed.\n\r\
MPWHILE ([IF CONDITION]) [COMMAND] - repeatedly executes commmand.\n\r\
MPDAMAGE [MOB] [MIN] [MAX] (KILL)- does random damage to the target. Kills only with optional KILL parm.\n\r\
MPTRACKTO [MOB NAME] - forces the mob to track down the given mob.\n\r\
MPAFFECT [SPELL] [MOB NAME] [PARMS] - automatically casts a spell on a mob.\n\r\
MPBEHAVE [BEHAVIOR] [MOB NAME] [PARMS] - adds a behavior to the mob.\n\r\
MPUNBEHAVE [BEHAVIOR] [MOB NAME] - removes a behavior from a  mob. \n\r\
MPTATTOO [MOB] (-)[TATTOONAME] - adds or removes the given tattoo for the mob. \n\r\
MPENABLE [MOB] [ABILITY NAME] [PROF] [STR] - adds a new skill to the mob.\n\r\
MPDISABLE [MOB] [ABILITY NAME] - removes a skill from the mob.\n\r\
MPSAVEVAR [MOB NAME] [VAR NAME] - saves the variable set using MPSETVAR to the database.\n\r\
MPLOADVAR [MOB NAME] [VAR NAME] - loads the variable from the database.\n\r\
BREAK -- return/break out of the current if condition or program script. \n\r\
[COMMAND] [PARMS]- any valid coffee mud command!\n\r\
** NOTES! For those commands which have multiple parameters (specifically \
MPAT, MPFORCE, MPCAST, MPECHOAT, you must use "'" characters in order to \
group any words in the first parameter of those commands.  Inside \
your command parameters, whether it be text, or even when specifying MOB \
or ITEM names, you may use any of the following freely:\n\r\
$a - name of the area the monsters in\n\r\
$i - monsters name\n\r\
$I - monsters display text\n\r\
$n - source of triggers name\n\r\
$N - source of triggers name\n\r\
$t - target of triggers name\n\r\
$T - target of triggers name\n\r\
$r - random pc inhabitants name\n\r\
$R - random pcinhabitants name\n\r\
$j - he/she of the monster\n\r\
$e - he/she of the trigger source\n\r\
$f - name of the person monster follows\n\r\
$E - he/she of the trigger target\n\r\
$F - he/she of the person monster follows\n\r\
$J - he/she of a random pc inhabitant\n\r\
$k - his/her of the monster\n\r\
$l - list of all mobs (excluding monster). See "." syntax below.\n\r\
$L - list of all Items in room. See "." syntax below.\n\r\
$m - his/her of the trigger source\n\r\
$M - his/her of the trigger target\n\r\
$K - his/her of a random pc inhabitant\n\r\
$o - item1 name\n\r\
$O - item1 name\n\r\
$p - item2 name\n\r\
$P - item2 name\n\r\
$g - lowercase form of the message from a MASK_PROG or SPEECH_PROG.\n\r\
$G - uppercase form of the message from a MASK_PROG or SPEECH_PROG.\n\r\
\n\r\
$<[CODE] [VAR NAME]> - the variable of the given name, of the given \
code.  Where code is $i, $n, $t, $o, or $p.  See MPSETVAR.\n\r\
\n\r\
${[NUM] [QUEST NAME]} - a mob name from the given quest, if the quest is running. \
The number corresponds to the order in which mobs were designated in the quest script. \
Counting starts at 1.\n\r\
\n\r\
$[[NUM] [QUEST NAME]] - an item name from the given quest, if the quest is running. \
The number corresponds to the order in which items were designated in the quest script. \
Counting starts at 1.\n\r\
\n\r\
$%FUNCTION(PARM1 PARM2..)% - replace this code with a value from one of the internal \
functions.  While the names are the same as the eval functions above, their \
parameters will be slightly different.  The functions which may be included in \
this code include the following:\n\r\
 - RAND() random number between 1 and 100.\n\r\
 - HAS([CODE])  name of a random item in given mobs inventory.\n\r\
 - WORN([CODE])  name of a random worn item in given mobs inventory.\n\r\
 - ISNPC([CODE])  not implemented.\n\r\
 - ISPC([CODE])  not implemented.\n\r\
 - ISGOOD([CODE])  returns the alignment string of the given mob.\n\r\
 - ISNAME([CODE])  Returns the real/full name of the given object.\n\r\
 - NUMMOBSINAREA([MOB NAME]) number of mobs in area matching mask.\n\r\
 - NUMMOBS([MOB NAME]) number of mobs in world matching mask.\n\r\
 - NUMRACEINAREA([MOB NAME]) number of mobs in area matching race.\n\r\
 - NUMRACES([MOB NAME]) number of mobs in world matching race.\n\r\
 - ISEVIL([CODE])  alignment number of the given mob.\n\r\
 - ISNEUTRAL([CODE])  short alignment string of the given mob.\n\r\
 - ISFIGHT([CODE])  name of the mob the given mob is fighting.\n\r\
 - ISALIVE([CODE])  health of the given mob.\n\r\
 - ISIMMORT([CODE])  not implemented.\n\r\
 - ISCHARMED([CODE])  name of the charm spell the mob is under.\n\r\
 - STAT([CODE] [STAT]) value of the given stat for the given object.\n\r\
 - GSTAT([CODE] [STAT]) like STAT, but player data accessible. See Generic.java.\n\r\
 - AFFECTED([CODE]) name of a random spell affect on the object.\n\r\
 - ISFOLLOW([CODE])  name of the mob the given mob is following.\n\r\
 - HITPRCNT([CODE])  % of hit points remaining for given mob.\n\r\
 - INLOCALE() name of the room type the monster is in.\n\r\
 - INROOM() name of the room the monster is in.\n\r\
 - ISHERE() nae of the area the monster is in.\n\r\
 - VAR([CODE] [VAR NAME]) Value of the given variable.\n\r\
 - SEX([CODE]) sex of the given mob.\n\r\
 - POSITION([CODE]) position name of the given mob.\n\r\
 - LEVEL([CODE]) level of the given mob.\n\r\
 - CLASS([CODE]) class of the given mob.\n\r\
 - BASECLASS([CODE]) base class of the given mob.\n\r\
 - RACE([CODE]) race of the given mob.\n\r\
 - RACECAT([CODE]) racial category of the given mob.\n\r\
 - GOLDAMT([CODE]) number of gold coins the given mob has.\n\r\
 - QUESTWINNER() not implemented.\n\r\
 - QUESTMOB() not implemented.\n\r\
 - QUESTITEM() not implemented.\n\r\
 - ISQUESTMOBALIVE() not implemented.\n\r\
 - ISTIME() returns the approx time of day in words.\n\r\
 - ISSEASON() returns the season.\n\r\
 - ISWEATHER() returns the weather\n\r\
 - ISMOON() returns the moon phase\n\r\
 - ISDAY() returns word day or evening.\n\r\
 - EVAL()  not implemented.\n\r\
 - NUMBER([VALUE/CODE]) Returns the numberic value of the given argument.\n\r\
 - RANDNUM([VALUE/CODE]) returns random number from 1..value/code.\n\r\
 - ROOMMOB([NUM]) returns the NUMth mob in the room's name.\n\r\
 - ROOMITEM([NUM]) whether the NUMth item in the room's NAME.\n\r\
 - NUMMOBSROOM() returns the number of mobs in the room.\n\r\
 - NUMITEMSROOM() returns the number of mobs in the room.\n\r\
 - NUMITEMSMOB([NAME]) returns the number of items the mob has.\n\r\
 - MOBITEM([MOBNAME] [NUM]) returns the NUMth item owned by mob mobname.\n\r\
 - INCONTAINER([CODE]) returns container of an item, or the mount of a mob.\n\r\
 \n\r\
Any of the $ codes may be followed by a period and a literal number to \
designate a particular word inside a string of many words.  For instance \
if $o evaluates to "a magic wand", $o.1 would evalulate to "magic".  If \
$l evaluated to "orc bob hassan", $l.2 would give "hassan".\n\r\

QUESTS=\
Quests are defined as a definable tasks which are completed by players for prizes. \
These tasks, the monitoring of their completion and status, as well as their \
availability, can all be automated by CoffeeMud.\n\r\
\n\r\
A quest is created using the CREATE QUEST [SCRIPT] command.  Where [SCRIPT] is a \
either a complete quest script, where each command line is terminated by a \
semicolon (;), or a load command of the form LOAD=[SCRIPT PATH].  An example of a \
create script using a load command is as follows: CREATE QUEST LOAD=c:/temp/myquest.txt. \
To load one of the built-in quests, for instance, use CREATE \
QUEST LOAD=quests/robbed/robbed.quest.\n\r\
\n\r\
Quests may be started manually, or by making them autoquests using the SET WAIT and \
SET INTERVAL commands below.  Quests may be started manually by using the \
MODIFY QUEST [QUEST NAME] command.  Quests can be listed, to see their status, \
using the LIST QUESTS command.  Quests can be removed from the list using the \
DESTROY QUEST [QUEST NAME] command.  Quests can be saved using the SAVE QUESTS \
command.  Quests saved this way will be restored during the next CoffeeMud reboot. \n\r\
\n\r\
When creating a new quest using the CREATE QUEST [SCRIPT] command, \
whether you use the load command to specify an external script, or include the \
script directly into the create command, the quest script commands are as follows:\n\r\
\n\r\
SET NAME [QUEST NAME] - the *unique* name of your quest.  This is a required command!\n\r\
\n\r\
SET DURATION [#TICKS] - # of ticks (4 second periods) the quest will last once \
started. This is a required command!\n\r\
\n\r\
SET WAIT [#TICKS] - minimum # ticks to wait between auto-starts of the quest. \
Required for auto-quests only!\n\r\
\n\r\
SET INTERVAL [#TICKS] - random # ticks (1-#TICKS) to wait between auto-starting \
the quest, AFTER the WAIT period (see above) is over. Required for auto-quests!\n\r\
\n\r\
IMPORT MOBS [XML FILE PATH] - this will import a list of custom mobs from a .CMARE \
file generated using the EXPORT ROOM MOBS command. The parameter must be the path \
and file name of the file.\n\r\
\n\r\
IMPORT ITEMS [XML FILE PATH] - this will import a list of custom items from a \
.CMARE file generated using the EXPORT ROOM ITEMS command. The parameter must \
be the path and file name of the file.\n\r\
\n\r\
SET AREA ([AREA NAME]) - will set the current designated area to the area \
specified.  Although this does nothing in itself, it is important for  the \
several commands which load mobs and items.  The area name ANY may be given \
to choose a random area.  If no area name is given, this will  CLEAR the area \
designation.  This can have a profound impact on how subsequent mob or item \
loading, or room setting commands work.\n\r\
\n\r\
SET ROOM ([ROOM NAME]) - will set the current designated room to the one \
specified.  If a room or area has been previously designated, and not \
cleared (see SET AREA), then the room will be selected from the designated \
area according to the room name criteria.  Otherwise, a room from the whole \
map will be chosen.  If a room name of ANY is given, then the room will be \
chosen randomly from the world, or the area if designated.  If no room name \
is given, this will effectly clear the room designation (but it will not \
clear the area designation!).\n\r\
\n\r\
SET LOCALE ([LOCALE]) - will set the current designated room to the one \
with the specified class name.  If a room or area has been previously \
designated, and not \
cleared (see SET AREA), then the room will be selected from the designated \
area according to the locale criteria.  Otherwise, a room from the whole \
map will be chosen.  If a locale of ANY is given, then the room will be \
chosen randomly from the world, or the area if designated.  If no locale \
is given, this will effectly clear the room designation (but it will not \
clear the area designation!).\n\r\
\n\r\
SET MOB ([MOB NAME]) - will set the current mob to one with the given name. \
If the name ends with MASK=..., then a mask similar in functionality to the \
one described in the Prop_HaveZapper will apply in addition to the \
name mask entered. \
The mob chosen will be selected from those in the designated area (if one \
was designated) or the world.  The mob must exist somewhere in the map \
for this command to work.  If a room has been previously designated, then \
this command will bring the mob to that room.  If a room or area has not \
been designated (or was cleared), then this command will designate a new room \
and area.\n\r\
\n\r\
SET MOBTYPE ([CLASS]) - will set the current mob to one with the given class name. \
The mob chosen will be selected from those in the designated area (if one \
was designated) or the world.  The mob must exist somewhere in the map \
for this command to work.  If a room has been previously designated, then \
this command will bring the mob to that room.  If a room or area has not \
been designated (or was cleared), then this command will designate a new room \
and area.\n\r\
\n\r\
SET ITEM ([ITEM NAME]) - will set the current item to one with the given name. \
The item chosen will be selected from those in the designated area (if one \
was designated) or the world.  The item must exist somewhere in a room on the map \
for this command to work.  If a room has been previously designated, then \
this command will bring the item to that room.  If a room or area has not \
been designated (or was cleared), then this command will designate a new room \
and area.\n\r\
\n\r\
SET ITEMTYPE ([CLASS]) - will set the current item to one with the given class name. \
The item chosen will be selected from those in the designated area (if one \
was designated) or the world.  The item must exist somewhere in a room on the map \
for this command to work.  If a room has been previously designated, then \
this command will bring the item to that room.  If a room or area has not \
been designated (or was cleared), then this command will designate a new room \
and area.\n\r\
\n\r\
LOAD MOB [MOB NAME] - will instantiate a mob of the given name from the list \
of mobs imported using the IMPORT MOBS command above.  \
If the name ends with MASK=..., then a mask similar in functionality to the \
one described in the Prop_HaveZapper will apply in addition to the \
name mask entered. This selected mob will be set \
as the current mob. If a room has been previously designated, then \
this command will create the mob in that room.  If a room or area has not \
been designated (or was cleared), then this command will designate a random room \
and area.\n\r\
\n\r\
LOAD ITEM [ITEM NAME] - will instantiate an item of the given name from the list \
of items imported using the IMPORT ITEMS command above.  This item will be set \
as the current item. If a room has been previously designated, then \
this command will create the item in that room.  If a room or area has not \
been designated (or was cleared), then this command will designate a random room \
and area.\n\r\
\n\r\
GIVE ITEM - will give the currently designated item (designated using the SET ITEM, \
or LOAD ITEM command) to the currently designated mob (designated using the SET MOB, \
or LOAD MOB command).  \n\r\
\n\r\
GIVE BEHAVIOR [BEHAVIOR ID] [PARAMETERS] - The behavior ID must be a valid behavior \
class name.  The parameters are any parameters you wish to pass to the behavior.  \
This command will give the currently designated mob (designated using the set or load \
mob commands) the above behavior. \n\r\
\n\r\
GIVE ABILITY [ABILITY ID] [PARAMETERS] - The ability ID must be a valid ability \
class name.  The parameters are any parameters you wish to pass to the ability.  \
This command will give the currently designated mob (designated using the set or load \
mob commands) the above ability. \n\r\
\n\r\
GIVE AFFECT [ABILITY ID] [PARAMETERS] - The ability ID must be a valid ability \
class name.  The parameters are any parameters you wish to pass to the ability.  \
This command will give the currently designated mob (designated using the set or load \
mob commands) the above spell affect as a permanent property. \n\r\
\n\r\
GIVE FOLLOWER [MOB NAME] - The mob name is a mob which will be selected from the \
list of previously designated mobs (designated using the load or set mob commands). \
This mob will be made into a follower of the CURRENTLY designated mob.  This \
command does not change the current mob designation, nor does it change the location \
of either mob.\n\r\
\n\r\
Final notes: This stuff may seem complicated, but just make sure you carefully \
examine the sample quests found in the CoffeeMud resources directory!  Also, \
remember that quest script errors are always sent out to your mud.log, so \
check their often when starting up a new quest!. \n\r\
\n\r

BEHAVIOR_PROTECTEDCITIZEN=\
Behavior   : ProtectedCitizen\n\r\
Targets    : MOBs\n\r\
Parameters : Max/Min ticks, pct chance, rooms radius, max#assists;guardian mask; yell strings, ';' separated.\n\r\
Example    : min=1 max=5 chance=25 radius=7 maxassists=1;-NAME +cityguard;HELP ME!!!;Save me!\n\r\
Example    : WANDER radius=20;-NAME +cityguard;HELP ME!!!;Save me!\n\r\
Description: \n\r\
This behavior allows a mob to scream for help during combat, given the \
conditions described by the parameters.  MIN and MAX describe the range \
of ticks (3 second periods) between screams.  MAXASSISTS describes the \
maximum number of mobs who will assist the citizen.  CHANCE describes the PERCENT \
chance the mob has of screaming after the period.  Whenever the mob screams \
the system will check RADIUS rooms deep around the mob for ANOTHER mob \
that matches the mask check after the first semicolon.  In this example, \
mobs with the word "citiguard" in their name.  If such a mob is found, and \
that mob has one of the "Mobile" behaviors, it will be moved one room \
closer to the screaming mob.  \
An optional WANDER flag allows mobs from adjacent areas to be drawn in. \
When the guardian mob arrives to the same \
room as the screaming mob, it will join the screaming mob in defence. \
All of the semicolon-separated strings at the end of the parameter \
list will denote the random things which the screaming mob will yell out. \
Once a mob has come to the screamers defence, it will stop screaming. \n\r\
The valid masks for the assisting mobs are as follows: \n\r\
<ZAP=disallow>

BEHAVIOR_PROTECTEDCITIZENS=\
Behavior   : ProtectedCitizens\n\r\
Targets    : MOBs, ROOMs, and AREAs\n\r\
Parameters : Max/Min ticks, pct chance, rooms radius, max#assists;\n\r\
Parm (cont): protected citizen mask;guardian mask; yell strings, ';' separated.\n\r\
Example    : radius=5 maxassists=7;-NAME +citizen;-NAME +cityguard;HELP ME!!!;Save me!\n\r\
Description: \n\r\
This behavior allows a mob described by the citizen mask (the first string \
after the first semicolon) to scream for help during combat, given the \
conditions described by the parameters.  MIN and MAX describe the range \
of ticks (3 second periods) between screams.  MAXASSISTS describes the \
maximum number of guardians who will assist the citizen.  CHANCE describes the PERCENT \
chance the mob has of screaming after the period.  Whenever the mob screams \
the system will check RADIUS rooms deep around the mob for a guardian mob \
that matches the mask check after the second semicolon.  In this example, \
mobs with the word "cityguard" in their name.  If such a mob is found, and \
that mob has one of the "Mobile" behaviors, it will be moved one room \
closer to the screaming mob.  When the guardian mob arrives to the same \
room as the screaming mob, it will join the screaming mob in defence. \
All of the semicolon-separated strings at the end of the parameter \
list will denote the random things which the screaming mob will yell out. \
Once a mob has come to the screamers defence, it will stop screaming. \n\r\
The valid masks for the citizen and guardian mobs are as follows: \n\r\
<ZAP=disallow>



BEHAVIOR_THIEFNESS=\
Behavior   : Thiefness\n\r\
Targets    : MOBs\n\r\
Parameters : (SUBCLASS NAME) (OFFENSIVE,DEFENSIVE,MIXEDOFFENSIVE,MIXEDDEFENSIVE)\n\r\
Example    : \n\r\
Example    : Thief\n\r\
Example    : Assassin MIXEDOFFENSIVE\n\r\
Description: \n\r\
An extension of CombatAbilities, this behavior makes the mob a Thief by class, \
and gives the mob thief skills appropriate to its level.  After \
this behavior has triggered, it will often require a RESET for any \
level changes to the mob to take over. The Thiefness behavior also \
includes many non-combat abilities, including sneaking and hiding, \
backstabbing, picking pockets, and even stealing at high levels!

BEHAVIOR_DELAYEDTRANSPORTER=\
Behavior   : Delayed Transporter\n\r\
Targets    : Rooms, Mobs, Items\n\r\
Parameters : Max and min ticks, pct chance, room ids separated by ';'.\n\r\
Example    : min=10 max=20 chance=25;Midgaard#3001;Sewers#6020;Midgaard#3020\n\r\
Description: \n\r\
This behavior defines a serious of random rooms.  All rooms are separated \
by the semicolons shown above.  The first parameter can me empty for defaults, \
or may contain a setting for minimum ticks, maximum ticks, and the percept chance \
of occurrence after the random number of ticks has expired.  In the above example \
every 10-20 ticks, there is a 25% chance that every mob in the same room as the \
behaving object will be teleported to one of the three listed rooms (at random).

BEHAVIOR_RANDOMTRAPS=\
Behavior   : Random Traps\n\r\
Targets    : Rooms, Areas\n\r\
Parameters : Max and min ticks, pct chance, min and max traps, locale and other flags.\n\r\
Example    : min=10 max=20 chance=25 mintraps=1 maxtraps=10 EXITS=YES ITEMS=YES ROOMS=YES\n\r\
Example    : min=10 max=20 chance=25 ROOMS=YES ITEMS=NO -ALL +CityStreet\n\r\
Description: \n\r\
This behavior will generate traps in a room or area.  \n\r\
Frequency Parameters: \n\r\
The frequency and chance that the traps will be generated is determined by \
the min, max, and chance parameters.  \n\r\
\n\r\
Number of traps parameters: \n\r\
The number of traps generated is determined by mintraps and \
maxtraps. \n\r\
\n\r\
Types of items trapped parameters: \n\r\
You may also dictate the types of things which can be trapped. \
By default, only closed, locked doors will get trapped.  To allow other \
things to be trapped, other parameters must be included.\n\r\
The ROOMS parameter may be made equal to YES to allow trapping of rooms, or \
NO to not allow this. \n\r\
The EXITS parameter may be made equal to DOORS to allow trapping of all \
doors, LOCKED to allow only trapping of locked doors, or NO to not allow \
exits to be trapped at all.\n\r\
The ITEMS parameter may be equal to YES to allow trapping of any items, \
CONT to allow trapping only of containers, LID to trap only the \
containers with lids, LOCK to trap only containers with locks, or \
NO to never trap items. \n\r\
\n\r\
The locale parameters:\n\r\
The TYPE of room in that area which will be checked for trappable things \
may also be specified. \
Use -ALL to disallow all locales, followed by +AIR +CITY +JUNGLE (etc) to \
reallow certain locales.  -CITY -UNDERWATER and others may be used to \
restrict certain locales.  If no locale types are specified, then all rooms \
in an area will be elligible.

BEHAVIOR_TAXCOLLECTOR=\
Behavior   : TaxCollector\n\r\
Targets    : MOBs\n\r\
Parameters : (WAIT=[TIME]) (GRACE=[TIME])\n\r\
Example    : \n\r\
Example    : WAIT=60000 GRACE=600000\n\r\
Description: \n\r\
This behavior makes the mob a very annoying and somewhat dangerous collector of \
money from both players and mobs.  The TaxCollector will demand 10% of any money \
by a random person it comes across.  That person has [WAIT] milliseconds to \
give over the money before the tax collector attacks.  If the taxcollector is \
paid (mobs will always pay), then the person has [GRACE] amount of time before \
money is demanded again.  The TaxCollector will never demand money from a \
member of its own clan, if it has one.

BEHAVIOR_VAGRANT=\
Behavior   : Vagrant\n\r\
Targets    : MOBs\n\r\
Parameters : \n\r\
Example    : \n\r\
Description: \n\r\
The mob will spontaneously decide to go to sleep whereever the mob is currently at.  After awhile \
the mob will wake up.

BEHAVIOR_VERYAGGRESSIVE=\
Behavior   : VeryAggressive\n\r\
Targets    : MOBs\n\r\
Parameters : aggression masks\n\r\
Example    : -race +elf \n\r\
Description: \n\r\
Makes the mob attack any player mob it can detect in the same room, from \
the moment the new mob enters.  In addition, this behavior will detect any \
mobs in adjacent rooms, and move to attack those as well. \
Horribly wounded mobs are not aggressive. If no other parameters are given, \
the mob will attack anyone within 15 levels. Valid aggressive masks include:  \n\r\
delay=x (makes the mob delay x ticks before looking for a victim) \n\r\
mobkiller (makes this behavior attack mobs as well as players) \n\r\
<ZAP=spare> 

BEHAVIOR_WATERCURRENTS=\
Behavior   : WaterCurrents\n\r\
Targets    : Areas, Rooms\n\r\
Parameters : [DIRECTION] [DIRECTION] [etc..]\n\r\
Example    : east south\n\r\
Description: \n\r\
The mob will be drawn along in the directions specified by the parameters.  If \
an exit is available in the first direction, it will be chosen, otherwise \
the second one, etc.

BEHAVIOR_WIMPY=\
Behavior   : Wimpy\n\r\
Targets    : MOBs\n\r\
Parameters : wimpy masks\n\r\
Example    : -race +elf \n\r\
Description: \n\r\
Makes the mob flee any player mob it can detect in the same room. \
If no other parameters are given, \
the mob will flee anyone. Valid masks include:  \n\r\
delay=x (makes the mob delay x ticks before looking for someone to fear) \n\r\
very=1 (makes the mob flee even if not in combat) \n\r\
<ZAP=fear> 

BEHAVIOR_WIMPYAGGRESSIVE=\
Behavior   : WimpyAggressive\n\r\
Targets    : MOBs\n\r\
Parameters : aggression masks\n\r\
Example    : -race +elf \n\r\
Description: \n\r\
Makes the mob attack any sleeping player mob it can detect in the same room. \
If no other parameters are given, \
the mob will attack anyone. Valid aggressive masks include:  \n\r\
delay=x (makes the mob delay x ticks before looking for a victim) \n\r\
mobkiller (makes this behavior attack mobs as well as players) \n\r\
<ZAP=spare> 
