package com.planet_ink.grinder;
import java.awt.*;
import java.util.*;
import javax.swing.JTextPane;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JEditorPane;
import javax.swing.JList;
import javax.swing.JButton;



public class GrinderRoom extends Dialog {

    private Frame myParent=null;
    private MapGrinder.Room room;
    private static boolean upAlready=false;
    
    
	public GrinderRoom(Frame parent, 
	                   String title, 
	                   String text, 
	                   boolean modal)
	{
		super(parent, modal);
        myParent=parent;
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
        
		//{{INIT_CONTROLS
		setLayout(null);
		setBackground(new java.awt.Color(255,255,128));
		setForeground(java.awt.Color.blue);
		setFont(new Font("Dialog", Font.BOLD, 12));
		setSize(377,418);
		setVisible(false);
		okButton.setLabel("OK");
		add(okButton);
		okButton.setBounds(12,384,66,24);
		CancelButton.setLabel("Cancel");
		add(CancelButton);
		CancelButton.setBounds(300,384,66,24);
		JLabel1.setRequestFocusEnabled(false);
		JLabel1.setSelectedTextColor(java.awt.Color.blue);
		JLabel1.setCaretColor(java.awt.Color.blue);
		JLabel1.setOpaque(false);
		JLabel1.setDisabledTextColor(java.awt.Color.blue);
		JLabel1.setEditable(false);
		JLabel1.setEnabled(false);
		add(JLabel1);
		JLabel1.setBackground(java.awt.Color.yellow);
		JLabel1.setBounds(12,12,336,24);
		add(roomClass);
		roomClass.setBounds(48,36,300,25);
		lroomClass.setText("Class:");
		add(lroomClass);
		lroomClass.setForeground(java.awt.Color.black);
		lroomClass.setBounds(12,36,36,24);
		lname.setText("Title:");
		add(lname);
		lname.setForeground(java.awt.Color.black);
		lname.setBounds(12,72,72,24);
		add(name);
		name.setBounds(48,72,300,24);
		//$$ titledBorder1.move(48,420);
		ldescription.setText("Text:");
		add(ldescription);
		ldescription.setForeground(java.awt.Color.black);
		ldescription.setBounds(12,96,72,24);
		lmobs.setText("MOBs:");
		add(lmobs);
		lmobs.setForeground(java.awt.Color.black);
		lmobs.setBounds(48,216,72,24);
		litems.setText("Items:");
		add(litems);
		litems.setForeground(java.awt.Color.black);
		litems.setBounds(204,216,72,24);
		mobs.setEnabled(false);
		add(mobs);
		mobs.setBounds(48,240,144,84);
		add(items);
		items.setBounds(204,240,144,84);
		delMOB.setLabel("Del");
		delMOB.setEnabled(false);
		add(delMOB);
		delMOB.setBounds(144,324,48,24);
		addMOB.setLabel("Add");
		addMOB.setEnabled(false);
		add(addMOB);
		addMOB.setBounds(48,324,48,24);
		modMOB.setLabel("Edit");
		modMOB.setEnabled(false);
		add(modMOB);
		modMOB.setBounds(96,324,48,24);
		addItem.setLabel("Add");
		addItem.setEnabled(false);
		add(addItem);
		addItem.setBounds(204,324,48,24);
		modItem.setLabel("Edit");
		modItem.setEnabled(false);
		add(modItem);
		modItem.setBounds(252,324,48,24);
		delItem.setLabel("Del");
		delItem.setEnabled(false);
		add(delItem);
		delItem.setBounds(300,324,48,24);
		add(description);
		description.setBackground(java.awt.Color.white);
		description.setBounds(48,108,300,108);
		items.setEnabled(false);
		add(items);
		setTitle("Yo baby yo baby yo!");
		setResizable(false);
		//}}
		
		JLabel1.setText(text);
		name.setFont(new Font("Dialog", Font.BOLD, 12));
		name.setForeground(java.awt.Color.blue);
		JLabel1.setForeground(java.awt.Color.blue);
		JLabel1.setFont(new Font("Dialog",Font.BOLD,12));
		setTitle(title);
        
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		okButton.addActionListener(lSymAction);
		CancelButton.addActionListener(lSymAction);
		SymKey lSymKey=new SymKey();
		okButton.addKeyListener(lSymKey);
		CancelButton.addKeyListener(lSymKey);
		SymKey aSymKey = new SymKey();
		name.addKeyListener(aSymKey);
		SymText lSymText = new SymText();
		description.addTextListener(lSymText);
		SymPropertyChange lSymPropertyChange = new SymPropertyChange();
		name.addPropertyChangeListener(lSymPropertyChange);
		description.addKeyListener(aSymKey);
		SymItem lSymItem = new SymItem();
		mobs.addItemListener(lSymItem);
		items.addItemListener(lSymItem);
		delMOB.addActionListener(lSymAction);
		delItem.addActionListener(lSymAction);
		addMOB.addActionListener(lSymAction);
		addItem.addActionListener(lSymAction);
		modMOB.addActionListener(lSymAction);
		modItem.addActionListener(lSymAction);
		roomClass.addItemListener(lSymItem);
		//}}

	}
    
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
                Dimension d = getSize();

		super.addNotify();

		// Only do this once.
		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + d.width, insets.top + insets.bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets.left, insets.top);
			components[i].setLocation(p);
		}

		// Used for addNotify check.
		fComponentsAdjusted = true;
	}

    public void populateDropDowns()
    {
        Vector V=TheGrinder.getRoomTypes();
        for(int e=0;e<V.size();e++)
        {
            String cid=(String)V.elementAt(e);
            roomClass.addItem(cid);
            if(cid.equalsIgnoreCase(room.classID))
                roomClass.select(e);
        }
        if(roomClass.getSelectedIndex()<0)
            roomClass.select("StoneRoom");
        if(!room.roomID.equalsIgnoreCase("new"))
        {
            roomClass.setEnabled(false);
            lroomClass.setEnabled(false);
        }
        new GrinderDelay(this).start();
    }

    public void addFromList(Vector itemList, int itemNum, int level)
    {
        for(int i=0;i<itemList.size();i++)
        {
            MapGrinder.Item item=(MapGrinder.Item)itemList.elementAt(i);
            if(item.locationNum==itemNum)
            {
                items.add(("                     ").substring(0,level)+item.classID);
                addFromList(itemList,i+1,level+1);
            }
        }
    }
        
    private class GrinderDelay extends Thread
    {
        private GrinderRoom myParent;
        
        public GrinderDelay(GrinderRoom parent)
        {
            super();
            myParent=parent;
        }
        
        public void run()
        {
            myParent.items.removeAll();
            myParent.mobs.removeAll();
            myParent.items.add("Loading...");
            myParent.mobs.add("Loading...");
            try { this.sleep(500); }catch(Exception e){}
            if(MapGrinder.loadRoomItems(myParent.room))
            {
                Vector V=TheGrinder.getItemTypes();
                V=TheGrinder.getMOBTypes();
                if((myParent!=null)&&(myParent.room!=null))
                {
                    myParent.items.removeAll();
                    myParent.mobs.removeAll();
                    for(int m=0;m<myParent.room.mobs.size();m++)
                    {
                        MapGrinder.MOB mob=(MapGrinder.MOB)myParent.room.mobs.elementAt(m);
                        myParent.mobs.add(mob.classID);
                    }
                    addFromList(myParent.room.items,0,0);
                    myParent.addItem.setEnabled(true);
                    myParent.addMOB.setEnabled(true);
                    myParent.mobs.setEnabled(true);
                    myParent.items.setEnabled(true);
                }
            }
        }
    }
    public static MapGrinder.Room newMe(Frame parent, 
	                                    String title)
	{
	    if(GrinderRoom.upAlready) return null;
	    GrinderRoom.upAlready=true;
	    String text="Create a new room!";
	    GrinderRoom GOC=new GrinderRoom(parent,title,text,true);
	    GOC.room=new MapGrinder.Room();
	    GOC.room.stuffLoaded=true;
	    GOC.room.roomID="NEW";
	    GOC.populateDropDowns();
	    GOC.setVisible(true);
	    GrinderRoom.upAlready=false;
	    return GOC.room;
	}
	
    public static MapGrinder.Room oldMe(Frame parent, 
                                        MapGrinder.Room oldRoom,
	                                    String title)
	{
	    if(GrinderRoom.upAlready) return null;
	    GrinderRoom.upAlready=true;
	    String text="Modify room "+oldRoom.roomID+".";
	    GrinderRoom GOC=new GrinderRoom(parent,title,text,true);
	    GOC.name.setText(oldRoom.displayText);
	    GOC.description.setText(oldRoom.description);
	    GOC.room=oldRoom.cloneof();
	    GOC.populateDropDowns();
	    GOC.setVisible(true);
	    GrinderRoom.upAlready=false;
	    return GOC.room;
	}


	public void setVisible(boolean b)
	{
	    if (b)
	    {
    		Rectangle bounds = getParent().getBounds();
    		Rectangle abounds = getBounds();

    		setLocation(bounds.x + (bounds.width - abounds.width)/ 2,
    			 bounds.y + (bounds.height - abounds.height)/2);
	    }

		super.setVisible(b);
	}

	//{{DECLARE_CONTROLS
	java.awt.Button okButton = new java.awt.Button();
	java.awt.Button CancelButton = new java.awt.Button();
	javax.swing.JTextPane JLabel1 = new javax.swing.JTextPane();
	java.awt.Choice roomClass = new java.awt.Choice();
	javax.swing.JLabel lroomClass = new javax.swing.JLabel();
	javax.swing.JLabel lname = new javax.swing.JLabel();
	javax.swing.JTextField name = new javax.swing.JTextField();
	javax.swing.JLabel ldescription = new javax.swing.JLabel();
	javax.swing.JLabel lmobs = new javax.swing.JLabel();
	javax.swing.JLabel litems = new javax.swing.JLabel();
	java.awt.List mobs = new java.awt.List(4);
	java.awt.TextArea description = new java.awt.TextArea("",0,0,TextArea.SCROLLBARS_VERTICAL_ONLY);
	java.awt.List items = new java.awt.List(4);
	java.awt.Button delMOB = new java.awt.Button();
	java.awt.Button addMOB = new java.awt.Button();
	java.awt.Button modMOB = new java.awt.Button();
	java.awt.Button addItem = new java.awt.Button();
	java.awt.Button modItem = new java.awt.Button();
	java.awt.Button delItem = new java.awt.Button();
	//}}
    
    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == okButton)
				okButton_ActionPerformed(event);
			else if (object == CancelButton)
				CancelButton_ActionPerformed(event);
			else if (object == delMOB)
				delMOB_ActionPerformed(event);
			else if (object == delItem)
				delItem_ActionPerformed(event);
			else if (object == addMOB)
				addMOB_ActionPerformed(event);
			else if (object == addItem)
				addItem_ActionPerformed(event);
			else if (object == modMOB)
				modMOB_ActionPerformed(event);
			else if (object == modItem)
				modItem_ActionPerformed(event);
			
		}
	}

	void okButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    if(name.getText().length()==0)
	    {
	        name.requestFocus();
	        return;
	    }
	    if(description.getText().length()==0)
	    {
	        description.requestFocus();
	        return;
	    }
		try {
			this.dispose();
		} catch (Exception e) {
		}
	}


	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowOpened(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == GrinderRoom.this)
				GrinderRoom_WindowOpened(event);
		}

		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == GrinderRoom.this)
				GrinderRoom_WindowClosing(event);
		}
	}

	void GrinderRoom_WindowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
	}


	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == name)
				name_keyTyped(event);
			else if (object == description)
				description_KeyTyped(event);
		}

		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if ((object == okButton)&&((event.getKeyCode()==13)||(event.getKeyCode()==10)))
                okButton_ActionPerformed(null);
			if ((object == CancelButton)&&((event.getKeyCode()==13)||(event.getKeyCode()==10)))
                CancelButton_ActionPerformed(null);
			else if (object == name)
				name_keyPressed(event);
			else if (object == description)
				description_KeyPressed(event);	
		}
	}
	void GrinderRoom_WindowOpened(java.awt.event.WindowEvent event)
	{
	}

	void CancelButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    room=null;
		try {
			this.dispose();
		} catch (Exception e) {
		}

			 
	}

	class SymText implements java.awt.event.TextListener
	{
		public void textValueChanged(java.awt.event.TextEvent event)
		{
			Object object = event.getSource();
			if (object == description)
				description_TextValueChanged(event);
		}
	}

	void description_TextValueChanged(java.awt.event.TextEvent event)
	{
	    room.description=description.getText();
	}

	class SymPropertyChange implements java.beans.PropertyChangeListener
	{
		public void propertyChange(java.beans.PropertyChangeEvent event)
		{
			Object object = event.getSource();
			if (object == name)
				name_propertyChange(event);
		}
	}

	void name_propertyChange(java.beans.PropertyChangeEvent event)
	{
	    room.displayText=name.getText();
	}

	void name_keyTyped(java.awt.event.KeyEvent event)
	{
	}

	void description_KeyTyped(java.awt.event.KeyEvent event)
	{
	}

	void name_keyPressed(java.awt.event.KeyEvent event)
	{
	    if(event.getKeyCode()>0)
    	    room.dirty=true;
	}

	void description_KeyPressed(java.awt.event.KeyEvent event)
	{
	    if(event.getKeyCode()>0)
    	    room.dirty=true;
	}

	class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
			Object object = event.getSource();
			if (object == mobs)
				mobs_ItemStateChanged(event);
			else if (object == items)
				items_ItemStateChanged(event);
			else if (object == roomClass)
				roomClass_ItemStateChanged(event);
		}
	}

	void mobs_ItemStateChanged(java.awt.event.ItemEvent event)
	{
	    modMOB.setEnabled(false);
	    delMOB.setEnabled(false);
	    if(mobs.getItemCount()>0)
	    {
	        modMOB.setEnabled(true);
	        delMOB.setEnabled(true);
	    }
	}

	void items_ItemStateChanged(java.awt.event.ItemEvent event)
	{
	    modItem.setEnabled(false);
	    delItem.setEnabled(false);
	    if(items.getItemCount()>0)
	    {
	        modItem.setEnabled(true);
	        delItem.setEnabled(true);
	    }
	}

	void delMOB_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    if(mobs.getSelectedIndex()<0)
	        return;
	    MapGrinder.MOB mob=(MapGrinder.MOB)room.mobs.elementAt(mobs.getSelectedIndex());
	    if(GrinderOKCancel.askMe(myParent,"Delete this poor MOB?","Delete mob "+mob.classID+"?"))
	    {
	        room.mobs.removeElementAt(mobs.getSelectedIndex());
	        mobs.remove(mobs.getSelectedIndex());
	        room.dirtyItems=true;
	    }
	}

    private void delItem(int itemDex, Vector V, MapGrinder.Item item)
    {
        for(int i=room.items.size()-1;i>=0;i--)
        {
            MapGrinder.Item item2=(MapGrinder.Item)room.items.elementAt(i);
            if(item2.locationNum==itemDex)
                delItem(i+1,V,item2);
        }
        V.addElement(item);
    }

	void delItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    if(items.getSelectedIndex()<0)
	        return;
	        
	    MapGrinder.Item item=(MapGrinder.Item)room.items.elementAt(items.getSelectedIndex());
	    if(GrinderOKCancel.askMe(myParent,"Delete this item?","Deleting item "+item.classID+" may also affect any items contained therein.  Is this ok?"))
	    {
            Vector V=new Vector();
	        delItem(items.getSelectedIndex()+1,V,item);
	        for(int i=0;i<V.size();i++)
	        {
	            MapGrinder.Item deadItem=(MapGrinder.Item)V.elementAt(i);
	            int removeAt=-1;
	            for(int a=0;a<room.items.size();a++)
	                if(room.items.elementAt(a)==deadItem)
	                {
	                    removeAt=a;
	                    break;
	                }
	            if(removeAt>=0)
	            {
	                room.items.removeElementAt(removeAt);
	                for(int a=0;a<room.items.size();a++)
	                {
	                    MapGrinder.Item liveItem=(MapGrinder.Item)room.items.elementAt(a);
	                    if(liveItem.locationNum>removeAt)
	                        liveItem.locationNum--;
	                }
	            }
	        }
	        items.removeAll();
            addFromList(room.items,0,0);
	        room.dirtyItems=true;
	    }
	}

	void addMOB_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    MapGrinder.MOB mob=new MapGrinder.MOB();
	    mob=(MapGrinder.MOB)GrinderAddThang.askMe(myParent,TheGrinder.getMOBTypes(),mob,"Insert a new MOB.","Select a MOB type to insert into this room.");
	    if(mob!=null)
    	{
	        mobs.add(mob.classID);
	        room.mobs.addElement(mob);
	        room.dirtyItems=true;
	    }
	}

	void addItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    MapGrinder.Item item=new MapGrinder.Item();
	    item=(MapGrinder.Item)GrinderAddThang.askMe(myParent,TheGrinder.getItemTypes(),item,"Insert a new Item.","Select a Item type to insert into this room.");
	    if(item!=null)
    	{
	        items.add(item.classID);
	        room.items.addElement(item);
	        room.dirtyItems=true;
	    }
	}

	void modMOB_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    if(mobs.getSelectedIndex()>=0)
	    {
	        MapGrinder.MOB mob=(MapGrinder.MOB)room.mobs.elementAt(mobs.getSelectedIndex());
	        MapGrinder.MOB mob2=GrinderMOBs.doMe(myParent,mob,"Mod a MOB");
	        if(mob2!=null)
	        {
	            mob2.copyInto(mob);
	            room.dirtyItems=true;
	        }
	    }
	}

	void modItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    if(items.getSelectedIndex()>=0)
	    {
	        MapGrinder.Item item=(MapGrinder.Item)room.items.elementAt(items.getSelectedIndex());
	        MapGrinder.Item item2=GrinderItems.doMe(myParent,room,item,"Modi Item");
	        if(item2!=null)
	        {
	            item2.copyInto(item);
	            items.removeAll();
                addFromList(room.items,0,0);
	            room.dirtyItems=true;
	        }
	    }
			 
	}

	void roomClass_ItemStateChanged(java.awt.event.ItemEvent event)
	{
	    if(room!=null)
    	    room.classID=roomClass.getSelectedItem();
	}
}
