package com.planet_ink.grinder;
import java.awt.*;
import java.util.*;
import javax.swing.JTextPane;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JEditorPane;
import javax.swing.JList;
import javax.swing.JButton;



public class GrinderItems extends Dialog {

    private Frame myParent=null;
    private MapGrinder.Item item;
    private static boolean upAlready=false;
    
    
	public GrinderItems(Frame parent, 
	                   String title, 
	                   String text, 
	                   boolean modal)
	{
		super(parent, modal);
        myParent=parent;
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
        
		//{{INIT_CONTROLS
		setLayout(null);
		setBackground(new java.awt.Color(255,255,128));
		setForeground(java.awt.Color.blue);
		setFont(new Font("Dialog", Font.BOLD, 12));
		setSize(359,475);
		setVisible(false);
		okButton.setLabel("OK");
		add(okButton);
		okButton.setBounds(12,444,66,24);
		CancelButton.setLabel("Cancel");
		add(CancelButton);
		CancelButton.setBounds(276,444,66,24);
		JLabel1.setRequestFocusEnabled(false);
		JLabel1.setSelectedTextColor(java.awt.Color.blue);
		JLabel1.setCaretColor(java.awt.Color.blue);
		JLabel1.setOpaque(false);
		JLabel1.setDisabledTextColor(java.awt.Color.blue);
		JLabel1.setEditable(false);
		JLabel1.setEnabled(false);
		add(JLabel1);
		JLabel1.setBackground(java.awt.Color.yellow);
		JLabel1.setBounds(12,12,336,24);
		JLabel2.setText("Class:");
		add(JLabel2);
		JLabel2.setForeground(java.awt.Color.black);
		JLabel2.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel2.setBounds(12,36,36,24);
		JLabel3.setText("Class:");
		add(JLabel3);
		JLabel3.setForeground(java.awt.Color.black);
		JLabel3.setBounds(60,36,144,24);
		JLabel4.setText("Experience Level:");
		add(JLabel4);
		JLabel4.setForeground(java.awt.Color.black);
		JLabel4.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel4.setBounds(216,36,108,24);
		add(level);
		level.setBounds(324,36,24,24);
		JLabel5.setText("Ability Code:");
		add(JLabel5);
		JLabel5.setForeground(java.awt.Color.black);
		JLabel5.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel5.setBounds(216,60,108,24);
		add(ability);
		ability.setBounds(324,60,24,24);
		JLabel6.setText("Uses remaining:");
		add(JLabel6);
		JLabel6.setForeground(java.awt.Color.black);
		JLabel6.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel6.setBounds(216,84,108,24);
		add(uses);
		uses.setBounds(324,84,24,24);
		JLabel7.setText("Rejuv/Ticks:");
		add(JLabel7);
		JLabel7.setForeground(java.awt.Color.black);
		JLabel7.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel7.setBounds(12,60,72,24);
		add(rejuv);
		rejuv.setBounds(84,60,96,24);
		JLabel11.setText("Name:");
		JLabel11.setEnabled(false);
		add(JLabel11);
		JLabel11.setForeground(java.awt.Color.black);
		JLabel11.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel11.setBounds(12,120,60,24);
		name.setEnabled(false);
		add(name);
		name.setBounds(84,120,120,24);
		JLabel12.setText("Display:");
		JLabel12.setEnabled(false);
		add(JLabel12);
		JLabel12.setForeground(java.awt.Color.black);
		JLabel12.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel12.setBounds(12,144,60,24);
		displayText.setEnabled(false);
		add(displayText);
		displayText.setBounds(84,144,264,24);
		JLabel13.setText("Description:");
		JLabel13.setEnabled(false);
		add(JLabel13);
		JLabel13.setForeground(java.awt.Color.black);
		JLabel13.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel13.setBounds(12,168,72,24);
		description.setEnabled(false);
		add(description);
		description.setBounds(84,168,264,24);
		attack.setEnabled(false);
		add(attack);
		attack.setBounds(324,240,24,24);
		JLabel14.setText("Armor:");
		JLabel14.setEnabled(false);
		add(JLabel14);
		JLabel14.setForeground(java.awt.Color.black);
		JLabel14.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel14.setBounds(264,216,48,24);
		JLabel15.setText("Attack:");
		JLabel15.setEnabled(false);
		add(JLabel15);
		JLabel15.setForeground(java.awt.Color.black);
		JLabel15.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel15.setBounds(264,240,48,24);
		damage.setEnabled(false);
		add(damage);
		damage.setBounds(324,264,24,24);
		JLabel16.setText("Damage:");
		JLabel16.setEnabled(false);
		add(JLabel16);
		JLabel16.setForeground(java.awt.Color.black);
		JLabel16.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel16.setBounds(264,264,60,24);
		armor.setEnabled(false);
		add(armor);
		armor.setBounds(324,216,24,24);
		weight.setEnabled(false);
		add(weight);
		weight.setBounds(84,216,72,24);
		JLabel18.setText("Weight:");
		JLabel18.setEnabled(false);
		add(JLabel18);
		JLabel18.setForeground(java.awt.Color.black);
		JLabel18.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel18.setBounds(12,216,60,24);
		secretIdentity.setEnabled(false);
		add(secretIdentity);
		secretIdentity.setBounds(84,192,264,24);
		JLabel8.setText("Identity:");
		JLabel8.setEnabled(false);
		add(JLabel8);
		JLabel8.setForeground(java.awt.Color.black);
		JLabel8.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel8.setBounds(12,192,72,24);
		JLabel9.setText("Value:");
		JLabel9.setEnabled(false);
		add(JLabel9);
		JLabel9.setForeground(java.awt.Color.black);
		JLabel9.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel9.setBounds(12,240,60,24);
		value.setEnabled(false);
		add(value);
		value.setBounds(84,240,72,24);
		JLabel10.setText("Material:");
		JLabel10.setEnabled(false);
		add(JLabel10);
		JLabel10.setForeground(java.awt.Color.black);
		JLabel10.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel10.setBounds(12,372,60,24);
		material.setEnabled(false);
		add(material);
		material.setBounds(84,372,72,25);
		capacity.setEnabled(false);
		add(capacity);
		capacity.setBounds(84,264,72,24);
		JLabel17.setText("Capacity:");
		JLabel17.setEnabled(false);
		add(JLabel17);
		JLabel17.setForeground(java.awt.Color.black);
		JLabel17.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel17.setBounds(12,264,60,24);
		properWornBitmap.setMultipleMode(true);
		properWornBitmap.setEnabled(false);
		add(properWornBitmap);
		properWornBitmap.setBounds(84,312,72,60);
		logicalAnd.setLabel("ALL");
		logicalAnd.setEnabled(false);
		add(logicalAnd);
		logicalAnd.setForeground(java.awt.Color.black);
		logicalAnd.setBounds(12,336,48,24);
		JLabel19.setText("Worn:");
		JLabel19.setEnabled(false);
		add(JLabel19);
		JLabel19.setForeground(java.awt.Color.black);
		JLabel19.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel19.setBounds(12,312,60,24);
		weaponclass.setEnabled(false);
		add(weaponclass);
		weaponclass.setBounds(276,372,72,25);
		JLabel20.setText("Fight:");
		JLabel20.setEnabled(false);
		add(JLabel20);
		JLabel20.setForeground(java.awt.Color.black);
		JLabel20.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel20.setBounds(168,372,36,24);
		weapontype.setEnabled(false);
		add(weapontype);
		weapontype.setBounds(204,372,72,25);
		liquidHeld.setEnabled(false);
		add(liquidHeld);
		liquidHeld.setBounds(84,288,72,24);
		JLabel22.setText("Liquid Held:");
		JLabel22.setEnabled(false);
		add(JLabel22);
		JLabel22.setForeground(java.awt.Color.black);
		JLabel22.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel22.setBounds(12,288,72,24);
		Nourishment.setEnabled(false);
		add(Nourishment);
		Nourishment.setBounds(324,288,24,24);
		JLabel23.setText("Nourish:");
		JLabel23.setEnabled(false);
		add(JLabel23);
		JLabel23.setForeground(java.awt.Color.black);
		JLabel23.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel23.setBounds(264,288,48,24);
		add(location);
		location.setBounds(84,84,100,25);
		JLabel24.setText("Location:");
		add(JLabel24);
		JLabel24.setForeground(java.awt.Color.black);
		JLabel24.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel24.setBounds(12,84,72,24);
		gettable.setLabel("Gettable");
		gettable.setEnabled(false);
		add(gettable);
		gettable.setForeground(java.awt.Color.black);
		gettable.setBounds(168,216,84,24);
		droppable.setLabel("Droppable");
		droppable.setEnabled(false);
		add(droppable);
		droppable.setForeground(java.awt.Color.black);
		droppable.setBounds(168,240,84,24);
		removable.setLabel("Removable");
		removable.setEnabled(false);
		add(removable);
		removable.setForeground(java.awt.Color.black);
		removable.setBounds(168,264,84,24);
		trapped.setLabel("Trapped");
		trapped.setEnabled(false);
		add(trapped);
		trapped.setForeground(java.awt.Color.black);
		trapped.setBounds(168,288,84,24);
		JLabel21.setText("Read:");
		JLabel21.setEnabled(false);
		add(JLabel21);
		JLabel21.setForeground(java.awt.Color.black);
		JLabel21.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel21.setBounds(12,396,48,24);
		readText.setEnabled(false);
		add(readText);
		readText.setBounds(84,396,264,24);
		invisible.setLabel("Invisible");
		invisible.setEnabled(false);
		add(invisible);
		invisible.setForeground(java.awt.Color.black);
		invisible.setBounds(168,312,84,24);
		hidden.setLabel("Hidden");
		hidden.setEnabled(false);
		add(hidden);
		hidden.setForeground(java.awt.Color.black);
		hidden.setBounds(168,336,84,24);
		glowing.setLabel("Glowing");
		glowing.setEnabled(false);
		add(glowing);
		glowing.setForeground(java.awt.Color.black);
		glowing.setBounds(264,336,84,24);
		//$$ titledBorder1.move(48,420);
		setTitle("Yo baby yo baby yo!");
		//}}
		
		JLabel1.setText(text);
		JLabel1.setForeground(java.awt.Color.blue);
		JLabel1.setFont(new Font("Dialog",Font.BOLD,12));
		setTitle(title);
        
		material.add("Cloth");
		material.add("Leather");
		material.add("Metal");
		material.add("Mithril");
		material.add("Wooden");
		material.add("Glass");
		try {
			material.select(0);
		}
		catch (IllegalArgumentException e) { }
		
		properWornBitmap.add("Not Worn");
		properWornBitmap.add("Head");
		properWornBitmap.add("Neck");
		properWornBitmap.add("Torso");
		properWornBitmap.add("Arms");
		properWornBitmap.add("L. Wrist");
		properWornBitmap.add("R. Wrist");
		properWornBitmap.add("L. Finger");
		properWornBitmap.add("R. Finger");
		properWornBitmap.add("Feet");
		properWornBitmap.add("Held");
		properWornBitmap.add("Wielded");
		properWornBitmap.add("Hands");
		properWornBitmap.add("Floating");
		properWornBitmap.add("Waist");
		properWornBitmap.add("Legs");
		
		weaponclass.add("Axe");
		weaponclass.add("Blunt");
		weaponclass.add("Edged");
		weaponclass.add("Flailed");
		weaponclass.add("Hammer");
		weaponclass.add("Natural");
		weaponclass.add("Polearm");
		weaponclass.add("Ranged");
		weaponclass.add("Sword");
		try {
			weaponclass.select(0);
		}
		catch (IllegalArgumentException e) { }
		
		weapontype.add("Natural");
		weapontype.add("Slashing");
		weapontype.add("Piercing");
		weapontype.add("Bashing");
		weapontype.add("Burning");
		weapontype.add("Bursting");
		try {
			weapontype.select(0);
		}
		catch (IllegalArgumentException e) { }
		
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		okButton.addActionListener(lSymAction);
		CancelButton.addActionListener(lSymAction);
		SymKey lSymKey=new SymKey();
		okButton.addKeyListener(lSymKey);
		CancelButton.addKeyListener(lSymKey);
		//SymPropertyChange lSymPropertyChange = new SymPropertyChange();
		//SymKey aSymKey = new SymKey();
		//SymText lSymText = new SymText();
		//}}

	}
    
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
                Dimension d = getSize();

		super.addNotify();

		// Only do this once.
		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + d.width, insets.top + insets.bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets.left, insets.top);
			components[i].setLocation(p);
		}

		// Used for addNotify check.
		fComponentsAdjusted = true;
	}

    public void populateDropDowns()
    {
        JLabel3.setText(item.classID);
        level.setText(""+item.level);
        ability.setText(""+item.ability);
        rejuv.setText(""+item.rejuv);
        uses.setText(""+item.usesRemaining);
        location.select(item.locationNum);
        JLabel12.setText("Misc Text:");
        if(item.classID.startsWith("Gen")&&(item.classID.length()>4)&&(Character.isUpperCase(item.classID.charAt(3))))
        {
            MapGrinder.GenGen g=new MapGrinder.GenGen();
            GenGrinder.setPropertiesStr(item,g,item.miscText());
            
            hidden.setEnabled(true);
            invisible.setEnabled(true);
            glowing.setEnabled(true);
            hidden.setState((g.disposition&GenGrinder.IS_HIDDEN)==GenGrinder.IS_HIDDEN);
            invisible.setState((g.disposition&GenGrinder.IS_INVISIBLE)==GenGrinder.IS_INVISIBLE);
            glowing.setState((g.disposition&GenGrinder.IS_LIGHT)==GenGrinder.IS_LIGHT);
            
            g.level=item.level;
            g.ability=item.ability;
            g.rejuv=item.rejuv;
            g.uses=item.usesRemaining;
            JLabel12.setText("Display:");
            for(int c=0;c<this.getComponentCount();c++)
            {
                Component C=this.getComponent(c);
                C.setEnabled(true);
            }
            name.setText(g.name);
            displayText.setText(g.displayText);
            description.setText(g.description);
            secretIdentity.setText(g.secretIdentity);
            weight.setText(""+g.weight);
            value.setText(""+g.baseGoldValue);
            if(item.classID.equalsIgnoreCase("GenContainer")
            ||item.classID.equalsIgnoreCase("GenWater")
            ||item.classID.equalsIgnoreCase("GenArmor"))
                capacity.setText(""+g.capacity);
            else
            {
                JLabel17.setEnabled(false);
                capacity.setEnabled(false);
            }
            
            if(item.classID.equalsIgnoreCase("GenWater"))
                liquidHeld.setText(""+g.nourishTotal);
            else
            {
                JLabel22.setEnabled(false);
                liquidHeld.setEnabled(false);
            }
            
            gettable.setState(g.isGettable);
            droppable.setState(g.isDroppable);
            removable.setState(g.isRemovable);
            trapped.setState(g.isTrapped);
            if(item.classID.equalsIgnoreCase("GenArmor"))
            {
                armor.setText(""+g.armor);
                logicalAnd.setState(g.logicalAnd);
                for(int i=0;i<30;i++)
                {
                    int bit=1<<i;
                    if((g.properLocationBitmap&bit)==bit)
                        properWornBitmap.select(i+1);
                }
            }
            else
            {
                JLabel14.setEnabled(false);
                armor.setEnabled(false);
                logicalAnd.setEnabled(false);
                properWornBitmap.setEnabled(false);
                JLabel19.setEnabled(false);
            }
            if(item.classID.equalsIgnoreCase("GenWeapon"))
            {
                attack.setText(""+g.attack);
                damage.setText(""+g.damage);
                weapontype.select(g.weaponType);
                weaponclass.select(g.weaponClassification);
            }
            else
            {
                JLabel15.setEnabled(false);
                attack.setEnabled(false);
                JLabel16.setEnabled(false);
                damage.setEnabled(false);
                JLabel20.setEnabled(false);
                weapontype.setEnabled(false);
                weaponclass.setEnabled(false);
            }
            
            if((item.classID.equalsIgnoreCase("GenWater"))
            ||(item.classID.equalsIgnoreCase("GenFood")))
            {
                Nourishment.setText(""+g.nourishUse);
                material.setEnabled(false);
                JLabel10.setEnabled(false);
            }
            else
            {
                Nourishment.setEnabled(false);
                JLabel23.setEnabled(false);
            }
            material.select(g.materialCode);
            if(g.isReadable)
                readText.setText(g.readableText.trim()+" ");
        }
        else
        {
            JLabel12.setEnabled(true);
            displayText.setEnabled(true);
            displayText.setText(item.miscText());
        }
    }
    public void dePopulateDropDowns()
    {
        if(item==null) return;
        item.level=GenGrinder.s_int(level.getText());
        item.ability=GenGrinder.s_int(ability.getText());
        item.rejuv=GenGrinder.s_int(rejuv.getText());
        item.usesRemaining=GenGrinder.s_int(uses.getText());
        item.locationNum=location.getSelectedIndex();
        if(item.classID.startsWith("Gen")&&(item.classID.length()>4)&&(Character.isUpperCase(item.classID.charAt(3))))
        {
            MapGrinder.GenGen g=new MapGrinder.GenGen();
            GenGrinder.setPropertiesStr(item,g,item.miscText());
            
            g.disposition=g.disposition&(GenGrinder.ALLMASK-GenGrinder.IS_HIDDEN);
            g.disposition=g.disposition&(GenGrinder.ALLMASK-GenGrinder.IS_INVISIBLE);
            g.disposition=g.disposition&(GenGrinder.ALLMASK-GenGrinder.IS_LIGHT);
            if(hidden.getState()) g.disposition=g.disposition|GenGrinder.IS_HIDDEN;
            if(invisible.getState()) g.disposition=g.disposition|GenGrinder.IS_INVISIBLE;
            if(glowing.getState()) g.disposition=g.disposition|GenGrinder.IS_LIGHT;
            
            g.level=item.level;
            g.ability=item.ability;
            g.rejuv=item.rejuv;
            g.uses=item.usesRemaining;
            g.name=name.getText();
            g.displayText=displayText.getText();
            g.description=description.getText();
            g.secretIdentity=secretIdentity.getText();
            g.weight=GenGrinder.s_int(weight.getText());
            g.baseGoldValue=GenGrinder.s_int(value.getText());
            g.capacity=GenGrinder.s_int(capacity.getText());
            g.nourishTotal=GenGrinder.s_int(liquidHeld.getText());
            g.isGettable=gettable.getState();
            g.isDroppable=droppable.getState();
            g.isRemovable=removable.getState();
            g.isTrapped=trapped.getState();
            g.armor=GenGrinder.s_int(armor.getText());
            g.logicalAnd=logicalAnd.getState();
            g.properLocationBitmap=0;
            for(int i=0;i<30;i++)
            {
                int bit=1<<i;
                if(i<(properWornBitmap.getItemCount()-1))
                    if(properWornBitmap.isIndexSelected(i+1))
                        g.properLocationBitmap+=bit;
            }
            g.attack=GenGrinder.s_int(attack.getText());
            g.damage=GenGrinder.s_int(damage.getText());
            g.weaponType=weapontype.getSelectedIndex();
            g.weaponClassification=weaponclass.getSelectedIndex();
            g.nourishUse=GenGrinder.s_int(Nourishment.getText());
            g.materialCode=material.getSelectedIndex();
            g.isReadable=false;
            if(readText.getText().length()>0)
            {
                g.isReadable=true;
                g.readableText=readText.getText().trim();
            }
            item.setMiscText(GenGrinder.getPropertiesStr(item,g));
        }
        else
            item.setMiscText(displayText.getText());
    }

    public static MapGrinder.Item doMe(Frame parent, 
                                        MapGrinder.Room room,
                                        MapGrinder.Item oldItem,
	                                    String title)
	{
	    if(GrinderItems.upAlready) return null;
	    GrinderItems.upAlready=true;
	    String text="Modify item "+oldItem.classID+".";
	    GrinderItems GOC=new GrinderItems(parent,title,text,true);
	    GOC.item=oldItem.cloneof();
        GOC.location.removeAll();
        GOC.location.add("Floor/Ground");
        for(int i=0;i<room.items.size();i++)
        {
            MapGrinder.Item titem=(MapGrinder.Item)room.items.elementAt(i);
            GOC.location.add(titem.classID);
        }
	    GOC.populateDropDowns();
	    GOC.setVisible(true);
	    GOC.dePopulateDropDowns();
	    GrinderItems.upAlready=false;
	    return GOC.item;
	}


	public void setVisible(boolean b)
	{
	    if (b)
	    {
    		Rectangle bounds = getParent().getBounds();
    		Rectangle abounds = getBounds();

    		setLocation(bounds.x + (bounds.width - abounds.width)/ 2,
    			 bounds.y + 50+(bounds.height - abounds.height)/2);
	    }

		super.setVisible(b);
	}

	//{{DECLARE_CONTROLS
	java.awt.Button okButton = new java.awt.Button();
	java.awt.Button CancelButton = new java.awt.Button();
	javax.swing.JTextPane JLabel1 = new javax.swing.JTextPane();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	javax.swing.JTextField level = new javax.swing.JTextField();
	javax.swing.JLabel JLabel5 = new javax.swing.JLabel();
	javax.swing.JTextField ability = new javax.swing.JTextField();
	javax.swing.JLabel JLabel6 = new javax.swing.JLabel();
	javax.swing.JTextField uses = new javax.swing.JTextField();
	javax.swing.JLabel JLabel7 = new javax.swing.JLabel();
	javax.swing.JTextField rejuv = new javax.swing.JTextField();
	javax.swing.JLabel JLabel11 = new javax.swing.JLabel();
	javax.swing.JTextField name = new javax.swing.JTextField();
	javax.swing.JLabel JLabel12 = new javax.swing.JLabel();
	javax.swing.JTextField displayText = new javax.swing.JTextField();
	javax.swing.JLabel JLabel13 = new javax.swing.JLabel();
	javax.swing.JTextField description = new javax.swing.JTextField();
	javax.swing.JTextField attack = new javax.swing.JTextField();
	javax.swing.JLabel JLabel14 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel15 = new javax.swing.JLabel();
	javax.swing.JTextField damage = new javax.swing.JTextField();
	javax.swing.JLabel JLabel16 = new javax.swing.JLabel();
	javax.swing.JTextField armor = new javax.swing.JTextField();
	javax.swing.JTextField weight = new javax.swing.JTextField();
	javax.swing.JLabel JLabel18 = new javax.swing.JLabel();
	javax.swing.JTextField secretIdentity = new javax.swing.JTextField();
	javax.swing.JLabel JLabel8 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel9 = new javax.swing.JLabel();
	javax.swing.JTextField value = new javax.swing.JTextField();
	javax.swing.JLabel JLabel10 = new javax.swing.JLabel();
	java.awt.Choice material = new java.awt.Choice();
	javax.swing.JTextField capacity = new javax.swing.JTextField();
	javax.swing.JLabel JLabel17 = new javax.swing.JLabel();
	java.awt.List properWornBitmap = new java.awt.List(4);
	java.awt.Checkbox logicalAnd = new java.awt.Checkbox();
	javax.swing.JLabel JLabel19 = new javax.swing.JLabel();
	java.awt.Choice weaponclass = new java.awt.Choice();
	javax.swing.JLabel JLabel20 = new javax.swing.JLabel();
	java.awt.Choice weapontype = new java.awt.Choice();
	javax.swing.JTextField liquidHeld = new javax.swing.JTextField();
	javax.swing.JLabel JLabel22 = new javax.swing.JLabel();
	javax.swing.JTextField Nourishment = new javax.swing.JTextField();
	javax.swing.JLabel JLabel23 = new javax.swing.JLabel();
	java.awt.Choice location = new java.awt.Choice();
	javax.swing.JLabel JLabel24 = new javax.swing.JLabel();
	java.awt.Checkbox gettable = new java.awt.Checkbox();
	java.awt.Checkbox droppable = new java.awt.Checkbox();
	java.awt.Checkbox removable = new java.awt.Checkbox();
	java.awt.Checkbox trapped = new java.awt.Checkbox();
	javax.swing.JLabel JLabel21 = new javax.swing.JLabel();
	javax.swing.JTextField readText = new javax.swing.JTextField();
	java.awt.Checkbox invisible = new java.awt.Checkbox();
	java.awt.Checkbox hidden = new java.awt.Checkbox();
	java.awt.Checkbox glowing = new java.awt.Checkbox();
	//}}
    
    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == okButton)
				okButton_ActionPerformed(event);
			else if (object == CancelButton)
				CancelButton_ActionPerformed(event);
			
		}
	}

	void okButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		try {
			this.dispose();
		} catch (Exception e) {
		}
	}


	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowOpened(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == GrinderItems.this)
				GrinderItems_WindowOpened(event);
		}

		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == GrinderItems.this)
				GrinderItems_WindowClosing(event);
		}
	}

	void GrinderItems_WindowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
	}


	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyTyped(java.awt.event.KeyEvent event)
		{
			//Object object = event.getSource();
			
		}

		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if ((object == okButton)&&((event.getKeyCode()==13)||(event.getKeyCode()==10)))
                okButton_ActionPerformed(null);
			if ((object == CancelButton)&&((event.getKeyCode()==13)||(event.getKeyCode()==10)))
                CancelButton_ActionPerformed(null);
				
		}
	}
	void GrinderItems_WindowOpened(java.awt.event.WindowEvent event)
	{
	}

	void CancelButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    item=null;
		try {
			this.dispose();
		} catch (Exception e) {
		}

			 
	}

	class SymText implements java.awt.event.TextListener
	{
		public void textValueChanged(java.awt.event.TextEvent event)
		{
		}
	}

	class SymPropertyChange implements java.beans.PropertyChangeListener
	{
		public void propertyChange(java.beans.PropertyChangeEvent event)
		{
		}
	}
}
